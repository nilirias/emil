Grammar:

Rule 0     S' -> program
Rule 1     program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main lastquad
Rule 2     lastquad -> <empty>
Rule 3     prog1 -> <empty>
Rule 4     prog2 -> <empty>
Rule 5     varsdecl -> empty
Rule 6     varsdecl -> VARS prog3 multivd multid
Rule 7     prog3 -> <empty>
Rule 8     multivd -> empty
Rule 9     multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd
Rule 10    prog4 -> <empty>
Rule 11    prog5 -> <empty>
Rule 12    multid -> empty
Rule 13    multid -> COMMA ID prog5 arr multid
Rule 14    tipo -> BOOL
Rule 15    tipo -> CHAR
Rule 16    tipo -> FLOAT
Rule 17    tipo -> INT
Rule 18    arr -> empty
Rule 19    arr -> LSQUARE exp arr1 RSQUARE
Rule 20    arr1 -> <empty>
Rule 21    funcdecl -> empty
Rule 22    funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
Rule 23    func1 -> <empty>
Rule 24    func2 -> <empty>
Rule 25    func3 -> <empty>
Rule 26    func4 -> <empty>
Rule 27    resetvarcont -> <empty>
Rule 28    tipofunc -> tipo
Rule 29    tipofunc -> VOID
Rule 30    param -> empty
Rule 31    param -> tipo param1 COLON ID param2 multiparam
Rule 32    param1 -> <empty>
Rule 33    param2 -> <empty>
Rule 34    multiparam -> empty
Rule 35    multiparam -> COMMA param
Rule 36    main -> MAIN scopemain LPAREN RPAREN stmnt maintemp
Rule 37    scopemain -> <empty>
Rule 38    maintemp -> <empty>
Rule 39    stmnt -> empty
Rule 40    stmnt -> while_stmnt stmnt
Rule 41    stmnt -> if_stmnt stmnt
Rule 42    stmnt -> write_stmnt stmnt
Rule 43    stmnt -> read_stmnt stmnt
Rule 44    stmnt -> ret_stmnt stmnt
Rule 45    stmnt -> func_stmnt stmnt
Rule 46    stmnt -> ass_stmnt stmnt
Rule 47    ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
Rule 48    arraccess -> empty
Rule 49    arraccess -> LSQUARE exp tam RSQUARE
Rule 50    tam -> <empty>
Rule 51    ass1 -> <empty>
Rule 52    ass2 -> <empty>
Rule 53    ass3 -> <empty>
Rule 54    func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
Rule 55    func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
Rule 56    fc1 -> <empty>
Rule 57    fc2 -> <empty>
Rule 58    arg -> empty
Rule 59    arg -> logic fc3 multiarg
Rule 60    fc3 -> <empty>
Rule 61    fc4 -> <empty>
Rule 62    fc5 -> <empty>
Rule 63    multiarg -> empty
Rule 64    multiarg -> COMMA arg multiarg
Rule 65    ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN
Rule 66    rettrue -> <empty>
Rule 67    retval -> <empty>
Rule 68    read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
Rule 69    write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
Rule 70    io1 -> <empty>
Rule 71    io2 -> <empty>
Rule 72    io3 -> <empty>
Rule 73    logic -> rel log2 OR log1 logic
Rule 74    logic -> rel log2 AND log1 logic
Rule 75    logic -> rel log2
Rule 76    log1 -> <empty>
Rule 77    log2 -> <empty>
Rule 78    relop -> EQUAL_TO
Rule 79    relop -> DIFFERENT_TO
Rule 80    relop -> LESS_OR_EQ_THAN
Rule 81    relop -> MORE_OR_EQ_THAN
Rule 82    relop -> LESS_THAN
Rule 83    relop -> MORE_THAN
Rule 84    rel -> exp rel2 relop rel1 LPAREN rel RPAREN
Rule 85    rel -> exp rel2 relop rel1 rel
Rule 86    rel -> exp rel2
Rule 87    rel1 -> <empty>
Rule 88    rel2 -> <empty>
Rule 89    exp -> term exp2 SUB exp1 exp
Rule 90    exp -> term exp2 SUM exp1 exp
Rule 91    exp -> term exp2
Rule 92    exp2 -> <empty>
Rule 93    exp1 -> <empty>
Rule 94    term -> factor term2 DIV term1 term
Rule 95    term -> factor term2 MULT term1 term
Rule 96    term -> factor term2
Rule 97    term1 -> <empty>
Rule 98    term2 -> <empty>
Rule 99    factor -> LPAREN logic RPAREN
Rule 100   factor -> func_exp
Rule 101   factor -> FALSE ctes4
Rule 102   factor -> TRUE ctes4
Rule 103   factor -> CTE_STR ctes3
Rule 104   factor -> CTE_FLT ctes2
Rule 105   factor -> CTE_NUM ctes1
Rule 106   factor -> ID fact1 arr
Rule 107   ctes1 -> <empty>
Rule 108   ctes2 -> <empty>
Rule 109   ctes3 -> <empty>
Rule 110   ctes4 -> <empty>
Rule 111   fact1 -> <empty>
Rule 112   multiexp -> empty
Rule 113   multiexp -> COMMA logic multiexp
Rule 114   if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
Rule 115   if1 -> <empty>
Rule 116   if2 -> <empty>
Rule 117   else_stmnt -> empty
Rule 118   else_stmnt -> ELSE else1 stmnt
Rule 119   else1 -> <empty>
Rule 120   while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
Rule 121   while1 -> <empty>
Rule 122   while2 -> <empty>
Rule 123   while3 -> <empty>
Rule 124   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 74
ASS                  : 47
BOOL                 : 14
CHAR                 : 15
COLON                : 9 31
COMMA                : 13 35 64 113
CTE_FLT              : 104
CTE_NUM              : 105
CTE_STR              : 103
DIFFERENT_TO         : 79
DIV                  : 94
ELSE                 : 118
END                  : 114 120
EQUAL_TO             : 78
FALSE                : 101
FLOAT                : 16
FUNC                 : 22
ID                   : 1 9 13 22 31 47 54 55 106
IF                   : 114
INT                  : 17
LCURLY               : 22
LESS_OR_EQ_THAN      : 80
LESS_THAN            : 82
LPAREN               : 22 36 54 55 65 68 69 84 99 114 120
LSQUARE              : 19 49
MAIN                 : 36
MORE_OR_EQ_THAN      : 81
MORE_THAN            : 83
MULT                 : 95
OR                   : 73
PROGRAM              : 1
RCURLY               : 22
READ                 : 68
RETURN               : 65
RPAREN               : 22 36 54 55 65 68 69 84 99 114 120
RSQUARE              : 19 49
SEMICLN              : 1 9 47 55 65 68 69
SUB                  : 89
SUM                  : 90
TRUE                 : 102
VARS                 : 6
VOID                 : 29
WHILE                : 120
WRITE                : 69
error                : 

Nonterminals, with rules where they appear:

arg                  : 54 55 64
arr                  : 9 13 106
arr1                 : 19
arraccess            : 47
ass1                 : 47
ass2                 : 47
ass3                 : 47
ass_stmnt            : 46
ctes1                : 105
ctes2                : 104
ctes3                : 103
ctes4                : 101 102
else1                : 118
else_stmnt           : 114
empty                : 5 8 12 18 21 30 34 39 48 58 63 112 117
exp                  : 19 49 84 85 86 89 90
exp1                 : 89 90
exp2                 : 89 90 91
fact1                : 106
factor               : 94 95 96
fc1                  : 54 55
fc2                  : 54 55
fc3                  : 59
fc4                  : 54 55
fc5                  : 54 55
func1                : 22
func2                : 22
func3                : 22
func4                : 22
func_exp             : 100
func_stmnt           : 45
funcdecl             : 1 22
if1                  : 114
if2                  : 114
if_stmnt             : 41
io1                  : 68 69
io2                  : 68 69
io3                  : 68 69
lastquad             : 1
log1                 : 73 74
log2                 : 73 74 75
logic                : 47 59 65 68 69 73 74 99 113 114 120
main                 : 1
maintemp             : 36
multiarg             : 59 64
multid               : 6 9 13
multiexp             : 113
multiparam           : 31
multivd              : 6 9
param                : 22 35
param1               : 31
param2               : 31
prog1                : 1
prog2                : 1
prog3                : 6
prog4                : 9
prog5                : 9 13
program              : 0
read_stmnt           : 43
rel                  : 73 74 75 84 85
rel1                 : 84 85
rel2                 : 84 85 86
relop                : 84 85
resetvarcont         : 22
ret_stmnt            : 44
rettrue              : 65
retval               : 65
scopemain            : 36
stmnt                : 22 36 40 41 42 43 44 45 46 114 118 120
tam                  : 49
term                 : 89 90 91 94 95
term1                : 94 95
term2                : 94 95 96
tipo                 : 9 28 31
tipofunc             : 22
varsdecl             : 1 22
while1               : 120
while2               : 120
while3               : 120
while_stmnt          : 40
write_stmnt          : 42


state 0

    (0) S' -> . program
    (1) program -> . PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main lastquad
    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROGRAM . prog1 ID prog2 SEMICLN varsdecl funcdecl main lastquad
    (3) prog1 -> .
    ID              reduce using rule 3 (prog1 -> .)

    prog1                          shift and go to state 3

state 3

    (1) program -> PROGRAM prog1 . ID prog2 SEMICLN varsdecl funcdecl main lastquad
    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM prog1 ID . prog2 SEMICLN varsdecl funcdecl main lastquad
    (4) prog2 -> .
    SEMICLN         reduce using rule 4 (prog2 -> .)

    prog2                          shift and go to state 5

state 5

    (1) program -> PROGRAM prog1 ID prog2 . SEMICLN varsdecl funcdecl main lastquad
    SEMICLN         shift and go to state 6


state 6

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN . varsdecl funcdecl main lastquad
    (5) varsdecl -> . empty
    (6) varsdecl -> . VARS prog3 multivd multid
    (124) empty -> .
    VARS            shift and go to state 9
    FUNC            reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)

    varsdecl                       shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl . funcdecl main lastquad
    (21) funcdecl -> . empty
    (22) funcdecl -> . FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (124) empty -> .
    FUNC            shift and go to state 12
    MAIN            reduce using rule 124 (empty -> .)

    funcdecl                       shift and go to state 10
    empty                          shift and go to state 11

state 8

    (5) varsdecl -> empty .
    FUNC            reduce using rule 5 (varsdecl -> empty .)
    MAIN            reduce using rule 5 (varsdecl -> empty .)
    WHILE           reduce using rule 5 (varsdecl -> empty .)
    IF              reduce using rule 5 (varsdecl -> empty .)
    WRITE           reduce using rule 5 (varsdecl -> empty .)
    READ            reduce using rule 5 (varsdecl -> empty .)
    RETURN          reduce using rule 5 (varsdecl -> empty .)
    ID              reduce using rule 5 (varsdecl -> empty .)
    RCURLY          reduce using rule 5 (varsdecl -> empty .)


state 9

    (6) varsdecl -> VARS . prog3 multivd multid
    (7) prog3 -> .
    BOOL            reduce using rule 7 (prog3 -> .)
    CHAR            reduce using rule 7 (prog3 -> .)
    FLOAT           reduce using rule 7 (prog3 -> .)
    INT             reduce using rule 7 (prog3 -> .)
    COMMA           reduce using rule 7 (prog3 -> .)
    FUNC            reduce using rule 7 (prog3 -> .)
    MAIN            reduce using rule 7 (prog3 -> .)
    WHILE           reduce using rule 7 (prog3 -> .)
    IF              reduce using rule 7 (prog3 -> .)
    WRITE           reduce using rule 7 (prog3 -> .)
    READ            reduce using rule 7 (prog3 -> .)
    RETURN          reduce using rule 7 (prog3 -> .)
    ID              reduce using rule 7 (prog3 -> .)
    RCURLY          reduce using rule 7 (prog3 -> .)

    prog3                          shift and go to state 13

state 10

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl . main lastquad
    (36) main -> . MAIN scopemain LPAREN RPAREN stmnt maintemp
    MAIN            shift and go to state 15

    main                           shift and go to state 14

state 11

    (21) funcdecl -> empty .
    MAIN            reduce using rule 21 (funcdecl -> empty .)


state 12

    (22) funcdecl -> FUNC . tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (28) tipofunc -> . tipo
    (29) tipofunc -> . VOID
    (14) tipo -> . BOOL
    (15) tipo -> . CHAR
    (16) tipo -> . FLOAT
    (17) tipo -> . INT
    VOID            shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    tipofunc                       shift and go to state 16
    tipo                           shift and go to state 17

state 13

    (6) varsdecl -> VARS prog3 . multivd multid
    (8) multivd -> . empty
    (9) multivd -> . tipo prog4 COLON ID prog5 arr multid SEMICLN multivd
    (124) empty -> .
    (14) tipo -> . BOOL
    (15) tipo -> . CHAR
    (16) tipo -> . FLOAT
    (17) tipo -> . INT
    COMMA           reduce using rule 124 (empty -> .)
    FUNC            reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    multivd                        shift and go to state 23
    empty                          shift and go to state 24
    tipo                           shift and go to state 25

state 14

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main . lastquad
    (2) lastquad -> .
    $end            reduce using rule 2 (lastquad -> .)

    lastquad                       shift and go to state 26

state 15

    (36) main -> MAIN . scopemain LPAREN RPAREN stmnt maintemp
    (37) scopemain -> .
    LPAREN          reduce using rule 37 (scopemain -> .)

    scopemain                      shift and go to state 27

state 16

    (22) funcdecl -> FUNC tipofunc . func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (23) func1 -> .
    ID              reduce using rule 23 (func1 -> .)

    func1                          shift and go to state 28

state 17

    (28) tipofunc -> tipo .
    ID              reduce using rule 28 (tipofunc -> tipo .)


state 18

    (29) tipofunc -> VOID .
    ID              reduce using rule 29 (tipofunc -> VOID .)


state 19

    (14) tipo -> BOOL .
    ID              reduce using rule 14 (tipo -> BOOL .)
    COLON           reduce using rule 14 (tipo -> BOOL .)


state 20

    (15) tipo -> CHAR .
    ID              reduce using rule 15 (tipo -> CHAR .)
    COLON           reduce using rule 15 (tipo -> CHAR .)


state 21

    (16) tipo -> FLOAT .
    ID              reduce using rule 16 (tipo -> FLOAT .)
    COLON           reduce using rule 16 (tipo -> FLOAT .)


state 22

    (17) tipo -> INT .
    ID              reduce using rule 17 (tipo -> INT .)
    COLON           reduce using rule 17 (tipo -> INT .)


state 23

    (6) varsdecl -> VARS prog3 multivd . multid
    (12) multid -> . empty
    (13) multid -> . COMMA ID prog5 arr multid
    (124) empty -> .
    COMMA           shift and go to state 31
    FUNC            reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)

    multid                         shift and go to state 29
    empty                          shift and go to state 30

state 24

    (8) multivd -> empty .
    COMMA           reduce using rule 8 (multivd -> empty .)
    FUNC            reduce using rule 8 (multivd -> empty .)
    MAIN            reduce using rule 8 (multivd -> empty .)
    WHILE           reduce using rule 8 (multivd -> empty .)
    IF              reduce using rule 8 (multivd -> empty .)
    WRITE           reduce using rule 8 (multivd -> empty .)
    READ            reduce using rule 8 (multivd -> empty .)
    RETURN          reduce using rule 8 (multivd -> empty .)
    ID              reduce using rule 8 (multivd -> empty .)
    RCURLY          reduce using rule 8 (multivd -> empty .)


state 25

    (9) multivd -> tipo . prog4 COLON ID prog5 arr multid SEMICLN multivd
    (10) prog4 -> .
    COLON           reduce using rule 10 (prog4 -> .)

    prog4                          shift and go to state 32

state 26

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main lastquad .
    $end            reduce using rule 1 (program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main lastquad .)


state 27

    (36) main -> MAIN scopemain . LPAREN RPAREN stmnt maintemp
    LPAREN          shift and go to state 33


state 28

    (22) funcdecl -> FUNC tipofunc func1 . ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    ID              shift and go to state 34


state 29

    (6) varsdecl -> VARS prog3 multivd multid .
    FUNC            reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    MAIN            reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    WHILE           reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    IF              reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    WRITE           reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    READ            reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    RETURN          reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    ID              reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)
    RCURLY          reduce using rule 6 (varsdecl -> VARS prog3 multivd multid .)


state 30

    (12) multid -> empty .
    FUNC            reduce using rule 12 (multid -> empty .)
    MAIN            reduce using rule 12 (multid -> empty .)
    WHILE           reduce using rule 12 (multid -> empty .)
    IF              reduce using rule 12 (multid -> empty .)
    WRITE           reduce using rule 12 (multid -> empty .)
    READ            reduce using rule 12 (multid -> empty .)
    RETURN          reduce using rule 12 (multid -> empty .)
    ID              reduce using rule 12 (multid -> empty .)
    RCURLY          reduce using rule 12 (multid -> empty .)
    SEMICLN         reduce using rule 12 (multid -> empty .)


state 31

    (13) multid -> COMMA . ID prog5 arr multid
    ID              shift and go to state 35


state 32

    (9) multivd -> tipo prog4 . COLON ID prog5 arr multid SEMICLN multivd
    COLON           shift and go to state 36


state 33

    (36) main -> MAIN scopemain LPAREN . RPAREN stmnt maintemp
    RPAREN          shift and go to state 37


state 34

    (22) funcdecl -> FUNC tipofunc func1 ID . func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (24) func2 -> .
    LPAREN          reduce using rule 24 (func2 -> .)

    func2                          shift and go to state 38

state 35

    (13) multid -> COMMA ID . prog5 arr multid
    (11) prog5 -> .
    LSQUARE         reduce using rule 11 (prog5 -> .)
    COMMA           reduce using rule 11 (prog5 -> .)
    FUNC            reduce using rule 11 (prog5 -> .)
    MAIN            reduce using rule 11 (prog5 -> .)
    WHILE           reduce using rule 11 (prog5 -> .)
    IF              reduce using rule 11 (prog5 -> .)
    WRITE           reduce using rule 11 (prog5 -> .)
    READ            reduce using rule 11 (prog5 -> .)
    RETURN          reduce using rule 11 (prog5 -> .)
    ID              reduce using rule 11 (prog5 -> .)
    RCURLY          reduce using rule 11 (prog5 -> .)
    SEMICLN         reduce using rule 11 (prog5 -> .)

    prog5                          shift and go to state 39

state 36

    (9) multivd -> tipo prog4 COLON . ID prog5 arr multid SEMICLN multivd
    ID              shift and go to state 40


state 37

    (36) main -> MAIN scopemain LPAREN RPAREN . stmnt maintemp
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    stmnt                          shift and go to state 41
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 38

    (22) funcdecl -> FUNC tipofunc func1 ID func2 . LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    LPAREN          shift and go to state 56


state 39

    (13) multid -> COMMA ID prog5 . arr multid
    (18) arr -> . empty
    (19) arr -> . LSQUARE exp arr1 RSQUARE
    (124) empty -> .
    LSQUARE         shift and go to state 59
    COMMA           reduce using rule 124 (empty -> .)
    FUNC            reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    SEMICLN         reduce using rule 124 (empty -> .)

    arr                            shift and go to state 57
    empty                          shift and go to state 58

state 40

    (9) multivd -> tipo prog4 COLON ID . prog5 arr multid SEMICLN multivd
    (11) prog5 -> .
    LSQUARE         reduce using rule 11 (prog5 -> .)
    COMMA           reduce using rule 11 (prog5 -> .)
    SEMICLN         reduce using rule 11 (prog5 -> .)

    prog5                          shift and go to state 60

state 41

    (36) main -> MAIN scopemain LPAREN RPAREN stmnt . maintemp
    (38) maintemp -> .
    $end            reduce using rule 38 (maintemp -> .)

    maintemp                       shift and go to state 61

state 42

    (39) stmnt -> empty .
    $end            reduce using rule 39 (stmnt -> empty .)
    ELSE            reduce using rule 39 (stmnt -> empty .)
    END             reduce using rule 39 (stmnt -> empty .)
    RCURLY          reduce using rule 39 (stmnt -> empty .)


state 43

    (40) stmnt -> while_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    while_stmnt                    shift and go to state 43
    stmnt                          shift and go to state 62
    empty                          shift and go to state 42
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 44

    (41) stmnt -> if_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    if_stmnt                       shift and go to state 44
    stmnt                          shift and go to state 63
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 45

    (42) stmnt -> write_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    write_stmnt                    shift and go to state 45
    stmnt                          shift and go to state 64
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 46

    (43) stmnt -> read_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    read_stmnt                     shift and go to state 46
    stmnt                          shift and go to state 65
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 47

    (44) stmnt -> ret_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    ret_stmnt                      shift and go to state 47
    stmnt                          shift and go to state 66
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 48

    (45) stmnt -> func_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    func_stmnt                     shift and go to state 48
    stmnt                          shift and go to state 67
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    ass_stmnt                      shift and go to state 49

state 49

    (46) stmnt -> ass_stmnt . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 124 (empty -> .)
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    ass_stmnt                      shift and go to state 49
    stmnt                          shift and go to state 68
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48

state 50

    (120) while_stmnt -> WHILE . while1 LPAREN logic while2 RPAREN stmnt while3 END
    (121) while1 -> .
    LPAREN          reduce using rule 121 (while1 -> .)

    while1                         shift and go to state 69

state 51

    (114) if_stmnt -> IF . LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    LPAREN          shift and go to state 70


state 52

    (69) write_stmnt -> WRITE . io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (70) io1 -> .
    LPAREN          reduce using rule 70 (io1 -> .)

    io1                            shift and go to state 71

state 53

    (68) read_stmnt -> READ . io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (70) io1 -> .
    LPAREN          reduce using rule 70 (io1 -> .)

    io1                            shift and go to state 72

state 54

    (65) ret_stmnt -> RETURN . LPAREN logic retval RPAREN rettrue SEMICLN
    LPAREN          shift and go to state 73


state 55

    (55) func_stmnt -> ID . fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> ID . ass1 arraccess ASS ass2 logic ass3 SEMICLN
    (56) fc1 -> .
    (51) ass1 -> .
    LPAREN          reduce using rule 56 (fc1 -> .)
    LSQUARE         reduce using rule 51 (ass1 -> .)
    ASS             reduce using rule 51 (ass1 -> .)

    fc1                            shift and go to state 74
    ass1                           shift and go to state 75

state 56

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN . param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (30) param -> . empty
    (31) param -> . tipo param1 COLON ID param2 multiparam
    (124) empty -> .
    (14) tipo -> . BOOL
    (15) tipo -> . CHAR
    (16) tipo -> . FLOAT
    (17) tipo -> . INT
    RPAREN          reduce using rule 124 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    param                          shift and go to state 76
    empty                          shift and go to state 77
    tipo                           shift and go to state 78

state 57

    (13) multid -> COMMA ID prog5 arr . multid
    (12) multid -> . empty
    (13) multid -> . COMMA ID prog5 arr multid
    (124) empty -> .
    COMMA           shift and go to state 31
    FUNC            reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    SEMICLN         reduce using rule 124 (empty -> .)

    multid                         shift and go to state 79
    empty                          shift and go to state 30

state 58

    (18) arr -> empty .
    COMMA           reduce using rule 18 (arr -> empty .)
    FUNC            reduce using rule 18 (arr -> empty .)
    MAIN            reduce using rule 18 (arr -> empty .)
    WHILE           reduce using rule 18 (arr -> empty .)
    IF              reduce using rule 18 (arr -> empty .)
    WRITE           reduce using rule 18 (arr -> empty .)
    READ            reduce using rule 18 (arr -> empty .)
    RETURN          reduce using rule 18 (arr -> empty .)
    ID              reduce using rule 18 (arr -> empty .)
    RCURLY          reduce using rule 18 (arr -> empty .)
    SEMICLN         reduce using rule 18 (arr -> empty .)
    DIV             reduce using rule 18 (arr -> empty .)
    MULT            reduce using rule 18 (arr -> empty .)
    SUB             reduce using rule 18 (arr -> empty .)
    SUM             reduce using rule 18 (arr -> empty .)
    RSQUARE         reduce using rule 18 (arr -> empty .)
    EQUAL_TO        reduce using rule 18 (arr -> empty .)
    DIFFERENT_TO    reduce using rule 18 (arr -> empty .)
    LESS_OR_EQ_THAN reduce using rule 18 (arr -> empty .)
    MORE_OR_EQ_THAN reduce using rule 18 (arr -> empty .)
    LESS_THAN       reduce using rule 18 (arr -> empty .)
    MORE_THAN       reduce using rule 18 (arr -> empty .)
    OR              reduce using rule 18 (arr -> empty .)
    AND             reduce using rule 18 (arr -> empty .)
    RPAREN          reduce using rule 18 (arr -> empty .)


state 59

    (19) arr -> LSQUARE . exp arr1 RSQUARE
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    exp                            shift and go to state 80
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 60

    (9) multivd -> tipo prog4 COLON ID prog5 . arr multid SEMICLN multivd
    (18) arr -> . empty
    (19) arr -> . LSQUARE exp arr1 RSQUARE
    (124) empty -> .
    LSQUARE         shift and go to state 59
    COMMA           reduce using rule 124 (empty -> .)
    SEMICLN         reduce using rule 124 (empty -> .)

    arr                            shift and go to state 91
    empty                          shift and go to state 58

state 61

    (36) main -> MAIN scopemain LPAREN RPAREN stmnt maintemp .
    $end            reduce using rule 36 (main -> MAIN scopemain LPAREN RPAREN stmnt maintemp .)


state 62

    (40) stmnt -> while_stmnt stmnt .
    $end            reduce using rule 40 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 40 (stmnt -> while_stmnt stmnt .)
    END             reduce using rule 40 (stmnt -> while_stmnt stmnt .)
    RCURLY          reduce using rule 40 (stmnt -> while_stmnt stmnt .)


state 63

    (41) stmnt -> if_stmnt stmnt .
    $end            reduce using rule 41 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 41 (stmnt -> if_stmnt stmnt .)
    END             reduce using rule 41 (stmnt -> if_stmnt stmnt .)
    RCURLY          reduce using rule 41 (stmnt -> if_stmnt stmnt .)


state 64

    (42) stmnt -> write_stmnt stmnt .
    $end            reduce using rule 42 (stmnt -> write_stmnt stmnt .)
    ELSE            reduce using rule 42 (stmnt -> write_stmnt stmnt .)
    END             reduce using rule 42 (stmnt -> write_stmnt stmnt .)
    RCURLY          reduce using rule 42 (stmnt -> write_stmnt stmnt .)


state 65

    (43) stmnt -> read_stmnt stmnt .
    $end            reduce using rule 43 (stmnt -> read_stmnt stmnt .)
    ELSE            reduce using rule 43 (stmnt -> read_stmnt stmnt .)
    END             reduce using rule 43 (stmnt -> read_stmnt stmnt .)
    RCURLY          reduce using rule 43 (stmnt -> read_stmnt stmnt .)


state 66

    (44) stmnt -> ret_stmnt stmnt .
    $end            reduce using rule 44 (stmnt -> ret_stmnt stmnt .)
    ELSE            reduce using rule 44 (stmnt -> ret_stmnt stmnt .)
    END             reduce using rule 44 (stmnt -> ret_stmnt stmnt .)
    RCURLY          reduce using rule 44 (stmnt -> ret_stmnt stmnt .)


state 67

    (45) stmnt -> func_stmnt stmnt .
    $end            reduce using rule 45 (stmnt -> func_stmnt stmnt .)
    ELSE            reduce using rule 45 (stmnt -> func_stmnt stmnt .)
    END             reduce using rule 45 (stmnt -> func_stmnt stmnt .)
    RCURLY          reduce using rule 45 (stmnt -> func_stmnt stmnt .)


state 68

    (46) stmnt -> ass_stmnt stmnt .
    $end            reduce using rule 46 (stmnt -> ass_stmnt stmnt .)
    ELSE            reduce using rule 46 (stmnt -> ass_stmnt stmnt .)
    END             reduce using rule 46 (stmnt -> ass_stmnt stmnt .)
    RCURLY          reduce using rule 46 (stmnt -> ass_stmnt stmnt .)


state 69

    (120) while_stmnt -> WHILE while1 . LPAREN logic while2 RPAREN stmnt while3 END
    LPAREN          shift and go to state 92


state 70

    (114) if_stmnt -> IF LPAREN . logic if1 RPAREN stmnt else_stmnt END if2
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 93
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 71

    (69) write_stmnt -> WRITE io1 . LPAREN logic io2 RPAREN io3 SEMICLN
    LPAREN          shift and go to state 96


state 72

    (68) read_stmnt -> READ io1 . LPAREN logic io2 RPAREN io3 SEMICLN
    LPAREN          shift and go to state 97


state 73

    (65) ret_stmnt -> RETURN LPAREN . logic retval RPAREN rettrue SEMICLN
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 98
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 74

    (55) func_stmnt -> ID fc1 . LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    LPAREN          shift and go to state 99


state 75

    (47) ass_stmnt -> ID ass1 . arraccess ASS ass2 logic ass3 SEMICLN
    (48) arraccess -> . empty
    (49) arraccess -> . LSQUARE exp tam RSQUARE
    (124) empty -> .
    LSQUARE         shift and go to state 102
    ASS             reduce using rule 124 (empty -> .)

    arraccess                      shift and go to state 100
    empty                          shift and go to state 101

state 76

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param . RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    RPAREN          shift and go to state 103


state 77

    (30) param -> empty .
    RPAREN          reduce using rule 30 (param -> empty .)


state 78

    (31) param -> tipo . param1 COLON ID param2 multiparam
    (32) param1 -> .
    COLON           reduce using rule 32 (param1 -> .)

    param1                         shift and go to state 104

state 79

    (13) multid -> COMMA ID prog5 arr multid .
    FUNC            reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    MAIN            reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    WHILE           reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    IF              reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    WRITE           reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    READ            reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    RETURN          reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    ID              reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    RCURLY          reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)
    SEMICLN         reduce using rule 13 (multid -> COMMA ID prog5 arr multid .)


state 80

    (19) arr -> LSQUARE exp . arr1 RSQUARE
    (20) arr1 -> .
    RSQUARE         reduce using rule 20 (arr1 -> .)

    arr1                           shift and go to state 105

state 81

    (89) exp -> term . exp2 SUB exp1 exp
    (90) exp -> term . exp2 SUM exp1 exp
    (91) exp -> term . exp2
    (92) exp2 -> .
    SUB             reduce using rule 92 (exp2 -> .)
    SUM             reduce using rule 92 (exp2 -> .)
    RSQUARE         reduce using rule 92 (exp2 -> .)
    EQUAL_TO        reduce using rule 92 (exp2 -> .)
    DIFFERENT_TO    reduce using rule 92 (exp2 -> .)
    LESS_OR_EQ_THAN reduce using rule 92 (exp2 -> .)
    MORE_OR_EQ_THAN reduce using rule 92 (exp2 -> .)
    LESS_THAN       reduce using rule 92 (exp2 -> .)
    MORE_THAN       reduce using rule 92 (exp2 -> .)
    OR              reduce using rule 92 (exp2 -> .)
    AND             reduce using rule 92 (exp2 -> .)
    RPAREN          reduce using rule 92 (exp2 -> .)
    COMMA           reduce using rule 92 (exp2 -> .)
    SEMICLN         reduce using rule 92 (exp2 -> .)

    exp2                           shift and go to state 106

state 82

    (94) term -> factor . term2 DIV term1 term
    (95) term -> factor . term2 MULT term1 term
    (96) term -> factor . term2
    (98) term2 -> .
    DIV             reduce using rule 98 (term2 -> .)
    MULT            reduce using rule 98 (term2 -> .)
    SUB             reduce using rule 98 (term2 -> .)
    SUM             reduce using rule 98 (term2 -> .)
    RSQUARE         reduce using rule 98 (term2 -> .)
    EQUAL_TO        reduce using rule 98 (term2 -> .)
    DIFFERENT_TO    reduce using rule 98 (term2 -> .)
    LESS_OR_EQ_THAN reduce using rule 98 (term2 -> .)
    MORE_OR_EQ_THAN reduce using rule 98 (term2 -> .)
    LESS_THAN       reduce using rule 98 (term2 -> .)
    MORE_THAN       reduce using rule 98 (term2 -> .)
    OR              reduce using rule 98 (term2 -> .)
    AND             reduce using rule 98 (term2 -> .)
    RPAREN          reduce using rule 98 (term2 -> .)
    COMMA           reduce using rule 98 (term2 -> .)
    SEMICLN         reduce using rule 98 (term2 -> .)

    term2                          shift and go to state 107

state 83

    (99) factor -> LPAREN . logic RPAREN
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 108
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 84

    (100) factor -> func_exp .
    DIV             reduce using rule 100 (factor -> func_exp .)
    MULT            reduce using rule 100 (factor -> func_exp .)
    SUB             reduce using rule 100 (factor -> func_exp .)
    SUM             reduce using rule 100 (factor -> func_exp .)
    RSQUARE         reduce using rule 100 (factor -> func_exp .)
    EQUAL_TO        reduce using rule 100 (factor -> func_exp .)
    DIFFERENT_TO    reduce using rule 100 (factor -> func_exp .)
    LESS_OR_EQ_THAN reduce using rule 100 (factor -> func_exp .)
    MORE_OR_EQ_THAN reduce using rule 100 (factor -> func_exp .)
    LESS_THAN       reduce using rule 100 (factor -> func_exp .)
    MORE_THAN       reduce using rule 100 (factor -> func_exp .)
    OR              reduce using rule 100 (factor -> func_exp .)
    AND             reduce using rule 100 (factor -> func_exp .)
    RPAREN          reduce using rule 100 (factor -> func_exp .)
    COMMA           reduce using rule 100 (factor -> func_exp .)
    SEMICLN         reduce using rule 100 (factor -> func_exp .)


state 85

    (101) factor -> FALSE . ctes4
    (110) ctes4 -> .
    DIV             reduce using rule 110 (ctes4 -> .)
    MULT            reduce using rule 110 (ctes4 -> .)
    SUB             reduce using rule 110 (ctes4 -> .)
    SUM             reduce using rule 110 (ctes4 -> .)
    RSQUARE         reduce using rule 110 (ctes4 -> .)
    EQUAL_TO        reduce using rule 110 (ctes4 -> .)
    DIFFERENT_TO    reduce using rule 110 (ctes4 -> .)
    LESS_OR_EQ_THAN reduce using rule 110 (ctes4 -> .)
    MORE_OR_EQ_THAN reduce using rule 110 (ctes4 -> .)
    LESS_THAN       reduce using rule 110 (ctes4 -> .)
    MORE_THAN       reduce using rule 110 (ctes4 -> .)
    OR              reduce using rule 110 (ctes4 -> .)
    AND             reduce using rule 110 (ctes4 -> .)
    RPAREN          reduce using rule 110 (ctes4 -> .)
    COMMA           reduce using rule 110 (ctes4 -> .)
    SEMICLN         reduce using rule 110 (ctes4 -> .)

    ctes4                          shift and go to state 109

state 86

    (102) factor -> TRUE . ctes4
    (110) ctes4 -> .
    DIV             reduce using rule 110 (ctes4 -> .)
    MULT            reduce using rule 110 (ctes4 -> .)
    SUB             reduce using rule 110 (ctes4 -> .)
    SUM             reduce using rule 110 (ctes4 -> .)
    RSQUARE         reduce using rule 110 (ctes4 -> .)
    EQUAL_TO        reduce using rule 110 (ctes4 -> .)
    DIFFERENT_TO    reduce using rule 110 (ctes4 -> .)
    LESS_OR_EQ_THAN reduce using rule 110 (ctes4 -> .)
    MORE_OR_EQ_THAN reduce using rule 110 (ctes4 -> .)
    LESS_THAN       reduce using rule 110 (ctes4 -> .)
    MORE_THAN       reduce using rule 110 (ctes4 -> .)
    OR              reduce using rule 110 (ctes4 -> .)
    AND             reduce using rule 110 (ctes4 -> .)
    RPAREN          reduce using rule 110 (ctes4 -> .)
    COMMA           reduce using rule 110 (ctes4 -> .)
    SEMICLN         reduce using rule 110 (ctes4 -> .)

    ctes4                          shift and go to state 110

state 87

    (103) factor -> CTE_STR . ctes3
    (109) ctes3 -> .
    DIV             reduce using rule 109 (ctes3 -> .)
    MULT            reduce using rule 109 (ctes3 -> .)
    SUB             reduce using rule 109 (ctes3 -> .)
    SUM             reduce using rule 109 (ctes3 -> .)
    RSQUARE         reduce using rule 109 (ctes3 -> .)
    EQUAL_TO        reduce using rule 109 (ctes3 -> .)
    DIFFERENT_TO    reduce using rule 109 (ctes3 -> .)
    LESS_OR_EQ_THAN reduce using rule 109 (ctes3 -> .)
    MORE_OR_EQ_THAN reduce using rule 109 (ctes3 -> .)
    LESS_THAN       reduce using rule 109 (ctes3 -> .)
    MORE_THAN       reduce using rule 109 (ctes3 -> .)
    OR              reduce using rule 109 (ctes3 -> .)
    AND             reduce using rule 109 (ctes3 -> .)
    RPAREN          reduce using rule 109 (ctes3 -> .)
    COMMA           reduce using rule 109 (ctes3 -> .)
    SEMICLN         reduce using rule 109 (ctes3 -> .)

    ctes3                          shift and go to state 111

state 88

    (104) factor -> CTE_FLT . ctes2
    (108) ctes2 -> .
    DIV             reduce using rule 108 (ctes2 -> .)
    MULT            reduce using rule 108 (ctes2 -> .)
    SUB             reduce using rule 108 (ctes2 -> .)
    SUM             reduce using rule 108 (ctes2 -> .)
    RSQUARE         reduce using rule 108 (ctes2 -> .)
    EQUAL_TO        reduce using rule 108 (ctes2 -> .)
    DIFFERENT_TO    reduce using rule 108 (ctes2 -> .)
    LESS_OR_EQ_THAN reduce using rule 108 (ctes2 -> .)
    MORE_OR_EQ_THAN reduce using rule 108 (ctes2 -> .)
    LESS_THAN       reduce using rule 108 (ctes2 -> .)
    MORE_THAN       reduce using rule 108 (ctes2 -> .)
    OR              reduce using rule 108 (ctes2 -> .)
    AND             reduce using rule 108 (ctes2 -> .)
    RPAREN          reduce using rule 108 (ctes2 -> .)
    COMMA           reduce using rule 108 (ctes2 -> .)
    SEMICLN         reduce using rule 108 (ctes2 -> .)

    ctes2                          shift and go to state 112

state 89

    (105) factor -> CTE_NUM . ctes1
    (107) ctes1 -> .
    DIV             reduce using rule 107 (ctes1 -> .)
    MULT            reduce using rule 107 (ctes1 -> .)
    SUB             reduce using rule 107 (ctes1 -> .)
    SUM             reduce using rule 107 (ctes1 -> .)
    RSQUARE         reduce using rule 107 (ctes1 -> .)
    EQUAL_TO        reduce using rule 107 (ctes1 -> .)
    DIFFERENT_TO    reduce using rule 107 (ctes1 -> .)
    LESS_OR_EQ_THAN reduce using rule 107 (ctes1 -> .)
    MORE_OR_EQ_THAN reduce using rule 107 (ctes1 -> .)
    LESS_THAN       reduce using rule 107 (ctes1 -> .)
    MORE_THAN       reduce using rule 107 (ctes1 -> .)
    OR              reduce using rule 107 (ctes1 -> .)
    AND             reduce using rule 107 (ctes1 -> .)
    RPAREN          reduce using rule 107 (ctes1 -> .)
    COMMA           reduce using rule 107 (ctes1 -> .)
    SEMICLN         reduce using rule 107 (ctes1 -> .)

    ctes1                          shift and go to state 113

state 90

    (106) factor -> ID . fact1 arr
    (54) func_exp -> ID . fc1 LPAREN fc2 arg fc4 RPAREN fc5
    (111) fact1 -> .
    (56) fc1 -> .
    LSQUARE         reduce using rule 111 (fact1 -> .)
    DIV             reduce using rule 111 (fact1 -> .)
    MULT            reduce using rule 111 (fact1 -> .)
    SUB             reduce using rule 111 (fact1 -> .)
    SUM             reduce using rule 111 (fact1 -> .)
    RSQUARE         reduce using rule 111 (fact1 -> .)
    EQUAL_TO        reduce using rule 111 (fact1 -> .)
    DIFFERENT_TO    reduce using rule 111 (fact1 -> .)
    LESS_OR_EQ_THAN reduce using rule 111 (fact1 -> .)
    MORE_OR_EQ_THAN reduce using rule 111 (fact1 -> .)
    LESS_THAN       reduce using rule 111 (fact1 -> .)
    MORE_THAN       reduce using rule 111 (fact1 -> .)
    OR              reduce using rule 111 (fact1 -> .)
    AND             reduce using rule 111 (fact1 -> .)
    RPAREN          reduce using rule 111 (fact1 -> .)
    COMMA           reduce using rule 111 (fact1 -> .)
    SEMICLN         reduce using rule 111 (fact1 -> .)
    LPAREN          reduce using rule 56 (fc1 -> .)

    fact1                          shift and go to state 114
    fc1                            shift and go to state 115

state 91

    (9) multivd -> tipo prog4 COLON ID prog5 arr . multid SEMICLN multivd
    (12) multid -> . empty
    (13) multid -> . COMMA ID prog5 arr multid
    (124) empty -> .
    COMMA           shift and go to state 31
    SEMICLN         reduce using rule 124 (empty -> .)

    multid                         shift and go to state 116
    empty                          shift and go to state 30

state 92

    (120) while_stmnt -> WHILE while1 LPAREN . logic while2 RPAREN stmnt while3 END
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 117
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 93

    (114) if_stmnt -> IF LPAREN logic . if1 RPAREN stmnt else_stmnt END if2
    (115) if1 -> .
    RPAREN          reduce using rule 115 (if1 -> .)

    if1                            shift and go to state 118

state 94

    (73) logic -> rel . log2 OR log1 logic
    (74) logic -> rel . log2 AND log1 logic
    (75) logic -> rel . log2
    (77) log2 -> .
    OR              reduce using rule 77 (log2 -> .)
    AND             reduce using rule 77 (log2 -> .)
    RPAREN          reduce using rule 77 (log2 -> .)
    COMMA           reduce using rule 77 (log2 -> .)
    SEMICLN         reduce using rule 77 (log2 -> .)

    log2                           shift and go to state 119

state 95

    (84) rel -> exp . rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> exp . rel2 relop rel1 rel
    (86) rel -> exp . rel2
    (88) rel2 -> .
    EQUAL_TO        reduce using rule 88 (rel2 -> .)
    DIFFERENT_TO    reduce using rule 88 (rel2 -> .)
    LESS_OR_EQ_THAN reduce using rule 88 (rel2 -> .)
    MORE_OR_EQ_THAN reduce using rule 88 (rel2 -> .)
    LESS_THAN       reduce using rule 88 (rel2 -> .)
    MORE_THAN       reduce using rule 88 (rel2 -> .)
    OR              reduce using rule 88 (rel2 -> .)
    AND             reduce using rule 88 (rel2 -> .)
    RPAREN          reduce using rule 88 (rel2 -> .)
    COMMA           reduce using rule 88 (rel2 -> .)
    SEMICLN         reduce using rule 88 (rel2 -> .)

    rel2                           shift and go to state 120

state 96

    (69) write_stmnt -> WRITE io1 LPAREN . logic io2 RPAREN io3 SEMICLN
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 121
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 97

    (68) read_stmnt -> READ io1 LPAREN . logic io2 RPAREN io3 SEMICLN
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 122
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 98

    (65) ret_stmnt -> RETURN LPAREN logic . retval RPAREN rettrue SEMICLN
    (67) retval -> .
    RPAREN          reduce using rule 67 (retval -> .)

    retval                         shift and go to state 123

state 99

    (55) func_stmnt -> ID fc1 LPAREN . fc2 arg fc4 RPAREN fc5 SEMICLN
    (57) fc2 -> .
    LPAREN          reduce using rule 57 (fc2 -> .)
    FALSE           reduce using rule 57 (fc2 -> .)
    TRUE            reduce using rule 57 (fc2 -> .)
    CTE_STR         reduce using rule 57 (fc2 -> .)
    CTE_FLT         reduce using rule 57 (fc2 -> .)
    CTE_NUM         reduce using rule 57 (fc2 -> .)
    ID              reduce using rule 57 (fc2 -> .)
    RPAREN          reduce using rule 57 (fc2 -> .)

    fc2                            shift and go to state 124

state 100

    (47) ass_stmnt -> ID ass1 arraccess . ASS ass2 logic ass3 SEMICLN
    ASS             shift and go to state 125


state 101

    (48) arraccess -> empty .
    ASS             reduce using rule 48 (arraccess -> empty .)


state 102

    (49) arraccess -> LSQUARE . exp tam RSQUARE
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    exp                            shift and go to state 126
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 103

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN . func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (25) func3 -> .
    LCURLY          reduce using rule 25 (func3 -> .)

    func3                          shift and go to state 127

state 104

    (31) param -> tipo param1 . COLON ID param2 multiparam
    COLON           shift and go to state 128


state 105

    (19) arr -> LSQUARE exp arr1 . RSQUARE
    RSQUARE         shift and go to state 129


state 106

    (89) exp -> term exp2 . SUB exp1 exp
    (90) exp -> term exp2 . SUM exp1 exp
    (91) exp -> term exp2 .
    SUB             shift and go to state 130
    SUM             shift and go to state 131
    RSQUARE         reduce using rule 91 (exp -> term exp2 .)
    EQUAL_TO        reduce using rule 91 (exp -> term exp2 .)
    DIFFERENT_TO    reduce using rule 91 (exp -> term exp2 .)
    LESS_OR_EQ_THAN reduce using rule 91 (exp -> term exp2 .)
    MORE_OR_EQ_THAN reduce using rule 91 (exp -> term exp2 .)
    LESS_THAN       reduce using rule 91 (exp -> term exp2 .)
    MORE_THAN       reduce using rule 91 (exp -> term exp2 .)
    OR              reduce using rule 91 (exp -> term exp2 .)
    AND             reduce using rule 91 (exp -> term exp2 .)
    RPAREN          reduce using rule 91 (exp -> term exp2 .)
    COMMA           reduce using rule 91 (exp -> term exp2 .)
    SEMICLN         reduce using rule 91 (exp -> term exp2 .)


state 107

    (94) term -> factor term2 . DIV term1 term
    (95) term -> factor term2 . MULT term1 term
    (96) term -> factor term2 .
    DIV             shift and go to state 132
    MULT            shift and go to state 133
    SUB             reduce using rule 96 (term -> factor term2 .)
    SUM             reduce using rule 96 (term -> factor term2 .)
    RSQUARE         reduce using rule 96 (term -> factor term2 .)
    EQUAL_TO        reduce using rule 96 (term -> factor term2 .)
    DIFFERENT_TO    reduce using rule 96 (term -> factor term2 .)
    LESS_OR_EQ_THAN reduce using rule 96 (term -> factor term2 .)
    MORE_OR_EQ_THAN reduce using rule 96 (term -> factor term2 .)
    LESS_THAN       reduce using rule 96 (term -> factor term2 .)
    MORE_THAN       reduce using rule 96 (term -> factor term2 .)
    OR              reduce using rule 96 (term -> factor term2 .)
    AND             reduce using rule 96 (term -> factor term2 .)
    RPAREN          reduce using rule 96 (term -> factor term2 .)
    COMMA           reduce using rule 96 (term -> factor term2 .)
    SEMICLN         reduce using rule 96 (term -> factor term2 .)


state 108

    (99) factor -> LPAREN logic . RPAREN
    RPAREN          shift and go to state 134


state 109

    (101) factor -> FALSE ctes4 .
    DIV             reduce using rule 101 (factor -> FALSE ctes4 .)
    MULT            reduce using rule 101 (factor -> FALSE ctes4 .)
    SUB             reduce using rule 101 (factor -> FALSE ctes4 .)
    SUM             reduce using rule 101 (factor -> FALSE ctes4 .)
    RSQUARE         reduce using rule 101 (factor -> FALSE ctes4 .)
    EQUAL_TO        reduce using rule 101 (factor -> FALSE ctes4 .)
    DIFFERENT_TO    reduce using rule 101 (factor -> FALSE ctes4 .)
    LESS_OR_EQ_THAN reduce using rule 101 (factor -> FALSE ctes4 .)
    MORE_OR_EQ_THAN reduce using rule 101 (factor -> FALSE ctes4 .)
    LESS_THAN       reduce using rule 101 (factor -> FALSE ctes4 .)
    MORE_THAN       reduce using rule 101 (factor -> FALSE ctes4 .)
    OR              reduce using rule 101 (factor -> FALSE ctes4 .)
    AND             reduce using rule 101 (factor -> FALSE ctes4 .)
    RPAREN          reduce using rule 101 (factor -> FALSE ctes4 .)
    COMMA           reduce using rule 101 (factor -> FALSE ctes4 .)
    SEMICLN         reduce using rule 101 (factor -> FALSE ctes4 .)


state 110

    (102) factor -> TRUE ctes4 .
    DIV             reduce using rule 102 (factor -> TRUE ctes4 .)
    MULT            reduce using rule 102 (factor -> TRUE ctes4 .)
    SUB             reduce using rule 102 (factor -> TRUE ctes4 .)
    SUM             reduce using rule 102 (factor -> TRUE ctes4 .)
    RSQUARE         reduce using rule 102 (factor -> TRUE ctes4 .)
    EQUAL_TO        reduce using rule 102 (factor -> TRUE ctes4 .)
    DIFFERENT_TO    reduce using rule 102 (factor -> TRUE ctes4 .)
    LESS_OR_EQ_THAN reduce using rule 102 (factor -> TRUE ctes4 .)
    MORE_OR_EQ_THAN reduce using rule 102 (factor -> TRUE ctes4 .)
    LESS_THAN       reduce using rule 102 (factor -> TRUE ctes4 .)
    MORE_THAN       reduce using rule 102 (factor -> TRUE ctes4 .)
    OR              reduce using rule 102 (factor -> TRUE ctes4 .)
    AND             reduce using rule 102 (factor -> TRUE ctes4 .)
    RPAREN          reduce using rule 102 (factor -> TRUE ctes4 .)
    COMMA           reduce using rule 102 (factor -> TRUE ctes4 .)
    SEMICLN         reduce using rule 102 (factor -> TRUE ctes4 .)


state 111

    (103) factor -> CTE_STR ctes3 .
    DIV             reduce using rule 103 (factor -> CTE_STR ctes3 .)
    MULT            reduce using rule 103 (factor -> CTE_STR ctes3 .)
    SUB             reduce using rule 103 (factor -> CTE_STR ctes3 .)
    SUM             reduce using rule 103 (factor -> CTE_STR ctes3 .)
    RSQUARE         reduce using rule 103 (factor -> CTE_STR ctes3 .)
    EQUAL_TO        reduce using rule 103 (factor -> CTE_STR ctes3 .)
    DIFFERENT_TO    reduce using rule 103 (factor -> CTE_STR ctes3 .)
    LESS_OR_EQ_THAN reduce using rule 103 (factor -> CTE_STR ctes3 .)
    MORE_OR_EQ_THAN reduce using rule 103 (factor -> CTE_STR ctes3 .)
    LESS_THAN       reduce using rule 103 (factor -> CTE_STR ctes3 .)
    MORE_THAN       reduce using rule 103 (factor -> CTE_STR ctes3 .)
    OR              reduce using rule 103 (factor -> CTE_STR ctes3 .)
    AND             reduce using rule 103 (factor -> CTE_STR ctes3 .)
    RPAREN          reduce using rule 103 (factor -> CTE_STR ctes3 .)
    COMMA           reduce using rule 103 (factor -> CTE_STR ctes3 .)
    SEMICLN         reduce using rule 103 (factor -> CTE_STR ctes3 .)


state 112

    (104) factor -> CTE_FLT ctes2 .
    DIV             reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    MULT            reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    SUB             reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    SUM             reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    RSQUARE         reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    EQUAL_TO        reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    DIFFERENT_TO    reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    LESS_OR_EQ_THAN reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    MORE_OR_EQ_THAN reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    LESS_THAN       reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    MORE_THAN       reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    OR              reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    AND             reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    RPAREN          reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    COMMA           reduce using rule 104 (factor -> CTE_FLT ctes2 .)
    SEMICLN         reduce using rule 104 (factor -> CTE_FLT ctes2 .)


state 113

    (105) factor -> CTE_NUM ctes1 .
    DIV             reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    MULT            reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    SUB             reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    SUM             reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    RSQUARE         reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    EQUAL_TO        reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    DIFFERENT_TO    reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    LESS_OR_EQ_THAN reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    MORE_OR_EQ_THAN reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    LESS_THAN       reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    MORE_THAN       reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    OR              reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    AND             reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    RPAREN          reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    COMMA           reduce using rule 105 (factor -> CTE_NUM ctes1 .)
    SEMICLN         reduce using rule 105 (factor -> CTE_NUM ctes1 .)


state 114

    (106) factor -> ID fact1 . arr
    (18) arr -> . empty
    (19) arr -> . LSQUARE exp arr1 RSQUARE
    (124) empty -> .
    LSQUARE         shift and go to state 59
    DIV             reduce using rule 124 (empty -> .)
    MULT            reduce using rule 124 (empty -> .)
    SUB             reduce using rule 124 (empty -> .)
    SUM             reduce using rule 124 (empty -> .)
    RSQUARE         reduce using rule 124 (empty -> .)
    EQUAL_TO        reduce using rule 124 (empty -> .)
    DIFFERENT_TO    reduce using rule 124 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 124 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 124 (empty -> .)
    LESS_THAN       reduce using rule 124 (empty -> .)
    MORE_THAN       reduce using rule 124 (empty -> .)
    OR              reduce using rule 124 (empty -> .)
    AND             reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)
    COMMA           reduce using rule 124 (empty -> .)
    SEMICLN         reduce using rule 124 (empty -> .)

    arr                            shift and go to state 135
    empty                          shift and go to state 58

state 115

    (54) func_exp -> ID fc1 . LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 136


state 116

    (9) multivd -> tipo prog4 COLON ID prog5 arr multid . SEMICLN multivd
    SEMICLN         shift and go to state 137


state 117

    (120) while_stmnt -> WHILE while1 LPAREN logic . while2 RPAREN stmnt while3 END
    (122) while2 -> .
    RPAREN          reduce using rule 122 (while2 -> .)

    while2                         shift and go to state 138

state 118

    (114) if_stmnt -> IF LPAREN logic if1 . RPAREN stmnt else_stmnt END if2
    RPAREN          shift and go to state 139


state 119

    (73) logic -> rel log2 . OR log1 logic
    (74) logic -> rel log2 . AND log1 logic
    (75) logic -> rel log2 .
    OR              shift and go to state 140
    AND             shift and go to state 141
    RPAREN          reduce using rule 75 (logic -> rel log2 .)
    COMMA           reduce using rule 75 (logic -> rel log2 .)
    SEMICLN         reduce using rule 75 (logic -> rel log2 .)


state 120

    (84) rel -> exp rel2 . relop rel1 LPAREN rel RPAREN
    (85) rel -> exp rel2 . relop rel1 rel
    (86) rel -> exp rel2 .
    (78) relop -> . EQUAL_TO
    (79) relop -> . DIFFERENT_TO
    (80) relop -> . LESS_OR_EQ_THAN
    (81) relop -> . MORE_OR_EQ_THAN
    (82) relop -> . LESS_THAN
    (83) relop -> . MORE_THAN
    OR              reduce using rule 86 (rel -> exp rel2 .)
    AND             reduce using rule 86 (rel -> exp rel2 .)
    RPAREN          reduce using rule 86 (rel -> exp rel2 .)
    COMMA           reduce using rule 86 (rel -> exp rel2 .)
    SEMICLN         reduce using rule 86 (rel -> exp rel2 .)
    EQUAL_TO        shift and go to state 143
    DIFFERENT_TO    shift and go to state 144
    LESS_OR_EQ_THAN shift and go to state 145
    MORE_OR_EQ_THAN shift and go to state 146
    LESS_THAN       shift and go to state 147
    MORE_THAN       shift and go to state 148

    relop                          shift and go to state 142

state 121

    (69) write_stmnt -> WRITE io1 LPAREN logic . io2 RPAREN io3 SEMICLN
    (71) io2 -> .
    RPAREN          reduce using rule 71 (io2 -> .)

    io2                            shift and go to state 149

state 122

    (68) read_stmnt -> READ io1 LPAREN logic . io2 RPAREN io3 SEMICLN
    (71) io2 -> .
    RPAREN          reduce using rule 71 (io2 -> .)

    io2                            shift and go to state 150

state 123

    (65) ret_stmnt -> RETURN LPAREN logic retval . RPAREN rettrue SEMICLN
    RPAREN          shift and go to state 151


state 124

    (55) func_stmnt -> ID fc1 LPAREN fc2 . arg fc4 RPAREN fc5 SEMICLN
    (58) arg -> . empty
    (59) arg -> . logic fc3 multiarg
    (124) empty -> .
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    RPAREN          reduce using rule 124 (empty -> .)
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    arg                            shift and go to state 152
    empty                          shift and go to state 153
    logic                          shift and go to state 154
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 125

    (47) ass_stmnt -> ID ass1 arraccess ASS . ass2 logic ass3 SEMICLN
    (52) ass2 -> .
    LPAREN          reduce using rule 52 (ass2 -> .)
    FALSE           reduce using rule 52 (ass2 -> .)
    TRUE            reduce using rule 52 (ass2 -> .)
    CTE_STR         reduce using rule 52 (ass2 -> .)
    CTE_FLT         reduce using rule 52 (ass2 -> .)
    CTE_NUM         reduce using rule 52 (ass2 -> .)
    ID              reduce using rule 52 (ass2 -> .)

    ass2                           shift and go to state 155

state 126

    (49) arraccess -> LSQUARE exp . tam RSQUARE
    (50) tam -> .
    RSQUARE         reduce using rule 50 (tam -> .)

    tam                            shift and go to state 156

state 127

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 . LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    LCURLY          shift and go to state 157


state 128

    (31) param -> tipo param1 COLON . ID param2 multiparam
    ID              shift and go to state 158


state 129

    (19) arr -> LSQUARE exp arr1 RSQUARE .
    COMMA           reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    FUNC            reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    MAIN            reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    WHILE           reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    IF              reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    WRITE           reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    READ            reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    RETURN          reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    ID              reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    RCURLY          reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    SEMICLN         reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    DIV             reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    MULT            reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    SUB             reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    SUM             reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    RSQUARE         reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    EQUAL_TO        reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    DIFFERENT_TO    reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    LESS_OR_EQ_THAN reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    MORE_OR_EQ_THAN reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    LESS_THAN       reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    MORE_THAN       reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    OR              reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    AND             reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)
    RPAREN          reduce using rule 19 (arr -> LSQUARE exp arr1 RSQUARE .)


state 130

    (89) exp -> term exp2 SUB . exp1 exp
    (93) exp1 -> .
    LPAREN          reduce using rule 93 (exp1 -> .)
    FALSE           reduce using rule 93 (exp1 -> .)
    TRUE            reduce using rule 93 (exp1 -> .)
    CTE_STR         reduce using rule 93 (exp1 -> .)
    CTE_FLT         reduce using rule 93 (exp1 -> .)
    CTE_NUM         reduce using rule 93 (exp1 -> .)
    ID              reduce using rule 93 (exp1 -> .)

    exp1                           shift and go to state 159

state 131

    (90) exp -> term exp2 SUM . exp1 exp
    (93) exp1 -> .
    LPAREN          reduce using rule 93 (exp1 -> .)
    FALSE           reduce using rule 93 (exp1 -> .)
    TRUE            reduce using rule 93 (exp1 -> .)
    CTE_STR         reduce using rule 93 (exp1 -> .)
    CTE_FLT         reduce using rule 93 (exp1 -> .)
    CTE_NUM         reduce using rule 93 (exp1 -> .)
    ID              reduce using rule 93 (exp1 -> .)

    exp1                           shift and go to state 160

state 132

    (94) term -> factor term2 DIV . term1 term
    (97) term1 -> .
    LPAREN          reduce using rule 97 (term1 -> .)
    FALSE           reduce using rule 97 (term1 -> .)
    TRUE            reduce using rule 97 (term1 -> .)
    CTE_STR         reduce using rule 97 (term1 -> .)
    CTE_FLT         reduce using rule 97 (term1 -> .)
    CTE_NUM         reduce using rule 97 (term1 -> .)
    ID              reduce using rule 97 (term1 -> .)

    term1                          shift and go to state 161

state 133

    (95) term -> factor term2 MULT . term1 term
    (97) term1 -> .
    LPAREN          reduce using rule 97 (term1 -> .)
    FALSE           reduce using rule 97 (term1 -> .)
    TRUE            reduce using rule 97 (term1 -> .)
    CTE_STR         reduce using rule 97 (term1 -> .)
    CTE_FLT         reduce using rule 97 (term1 -> .)
    CTE_NUM         reduce using rule 97 (term1 -> .)
    ID              reduce using rule 97 (term1 -> .)

    term1                          shift and go to state 162

state 134

    (99) factor -> LPAREN logic RPAREN .
    DIV             reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    MULT            reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    SUB             reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    SUM             reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    RSQUARE         reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    EQUAL_TO        reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    DIFFERENT_TO    reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    LESS_OR_EQ_THAN reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    MORE_OR_EQ_THAN reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    LESS_THAN       reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    MORE_THAN       reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    OR              reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    AND             reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    RPAREN          reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    COMMA           reduce using rule 99 (factor -> LPAREN logic RPAREN .)
    SEMICLN         reduce using rule 99 (factor -> LPAREN logic RPAREN .)


state 135

    (106) factor -> ID fact1 arr .
    DIV             reduce using rule 106 (factor -> ID fact1 arr .)
    MULT            reduce using rule 106 (factor -> ID fact1 arr .)
    SUB             reduce using rule 106 (factor -> ID fact1 arr .)
    SUM             reduce using rule 106 (factor -> ID fact1 arr .)
    RSQUARE         reduce using rule 106 (factor -> ID fact1 arr .)
    EQUAL_TO        reduce using rule 106 (factor -> ID fact1 arr .)
    DIFFERENT_TO    reduce using rule 106 (factor -> ID fact1 arr .)
    LESS_OR_EQ_THAN reduce using rule 106 (factor -> ID fact1 arr .)
    MORE_OR_EQ_THAN reduce using rule 106 (factor -> ID fact1 arr .)
    LESS_THAN       reduce using rule 106 (factor -> ID fact1 arr .)
    MORE_THAN       reduce using rule 106 (factor -> ID fact1 arr .)
    OR              reduce using rule 106 (factor -> ID fact1 arr .)
    AND             reduce using rule 106 (factor -> ID fact1 arr .)
    RPAREN          reduce using rule 106 (factor -> ID fact1 arr .)
    COMMA           reduce using rule 106 (factor -> ID fact1 arr .)
    SEMICLN         reduce using rule 106 (factor -> ID fact1 arr .)


state 136

    (54) func_exp -> ID fc1 LPAREN . fc2 arg fc4 RPAREN fc5
    (57) fc2 -> .
    LPAREN          reduce using rule 57 (fc2 -> .)
    FALSE           reduce using rule 57 (fc2 -> .)
    TRUE            reduce using rule 57 (fc2 -> .)
    CTE_STR         reduce using rule 57 (fc2 -> .)
    CTE_FLT         reduce using rule 57 (fc2 -> .)
    CTE_NUM         reduce using rule 57 (fc2 -> .)
    ID              reduce using rule 57 (fc2 -> .)
    RPAREN          reduce using rule 57 (fc2 -> .)

    fc2                            shift and go to state 163

state 137

    (9) multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN . multivd
    (8) multivd -> . empty
    (9) multivd -> . tipo prog4 COLON ID prog5 arr multid SEMICLN multivd
    (124) empty -> .
    (14) tipo -> . BOOL
    (15) tipo -> . CHAR
    (16) tipo -> . FLOAT
    (17) tipo -> . INT
    COMMA           reduce using rule 124 (empty -> .)
    FUNC            reduce using rule 124 (empty -> .)
    MAIN            reduce using rule 124 (empty -> .)
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    tipo                           shift and go to state 25
    multivd                        shift and go to state 164
    empty                          shift and go to state 24

state 138

    (120) while_stmnt -> WHILE while1 LPAREN logic while2 . RPAREN stmnt while3 END
    RPAREN          shift and go to state 165


state 139

    (114) if_stmnt -> IF LPAREN logic if1 RPAREN . stmnt else_stmnt END if2
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    ELSE            reduce using rule 124 (empty -> .)
    END             reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    stmnt                          shift and go to state 166
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 140

    (73) logic -> rel log2 OR . log1 logic
    (76) log1 -> .
    LPAREN          reduce using rule 76 (log1 -> .)
    FALSE           reduce using rule 76 (log1 -> .)
    TRUE            reduce using rule 76 (log1 -> .)
    CTE_STR         reduce using rule 76 (log1 -> .)
    CTE_FLT         reduce using rule 76 (log1 -> .)
    CTE_NUM         reduce using rule 76 (log1 -> .)
    ID              reduce using rule 76 (log1 -> .)

    log1                           shift and go to state 167

state 141

    (74) logic -> rel log2 AND . log1 logic
    (76) log1 -> .
    LPAREN          reduce using rule 76 (log1 -> .)
    FALSE           reduce using rule 76 (log1 -> .)
    TRUE            reduce using rule 76 (log1 -> .)
    CTE_STR         reduce using rule 76 (log1 -> .)
    CTE_FLT         reduce using rule 76 (log1 -> .)
    CTE_NUM         reduce using rule 76 (log1 -> .)
    ID              reduce using rule 76 (log1 -> .)

    log1                           shift and go to state 168

state 142

    (84) rel -> exp rel2 relop . rel1 LPAREN rel RPAREN
    (85) rel -> exp rel2 relop . rel1 rel
    (87) rel1 -> .
    LPAREN          reduce using rule 87 (rel1 -> .)
    FALSE           reduce using rule 87 (rel1 -> .)
    TRUE            reduce using rule 87 (rel1 -> .)
    CTE_STR         reduce using rule 87 (rel1 -> .)
    CTE_FLT         reduce using rule 87 (rel1 -> .)
    CTE_NUM         reduce using rule 87 (rel1 -> .)
    ID              reduce using rule 87 (rel1 -> .)

    rel1                           shift and go to state 169

state 143

    (78) relop -> EQUAL_TO .
    LPAREN          reduce using rule 78 (relop -> EQUAL_TO .)
    FALSE           reduce using rule 78 (relop -> EQUAL_TO .)
    TRUE            reduce using rule 78 (relop -> EQUAL_TO .)
    CTE_STR         reduce using rule 78 (relop -> EQUAL_TO .)
    CTE_FLT         reduce using rule 78 (relop -> EQUAL_TO .)
    CTE_NUM         reduce using rule 78 (relop -> EQUAL_TO .)
    ID              reduce using rule 78 (relop -> EQUAL_TO .)


state 144

    (79) relop -> DIFFERENT_TO .
    LPAREN          reduce using rule 79 (relop -> DIFFERENT_TO .)
    FALSE           reduce using rule 79 (relop -> DIFFERENT_TO .)
    TRUE            reduce using rule 79 (relop -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 79 (relop -> DIFFERENT_TO .)
    CTE_FLT         reduce using rule 79 (relop -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 79 (relop -> DIFFERENT_TO .)
    ID              reduce using rule 79 (relop -> DIFFERENT_TO .)


state 145

    (80) relop -> LESS_OR_EQ_THAN .
    LPAREN          reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)
    FALSE           reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)
    CTE_FLT         reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 80 (relop -> LESS_OR_EQ_THAN .)


state 146

    (81) relop -> MORE_OR_EQ_THAN .
    LPAREN          reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)
    FALSE           reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)
    CTE_FLT         reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 81 (relop -> MORE_OR_EQ_THAN .)


state 147

    (82) relop -> LESS_THAN .
    LPAREN          reduce using rule 82 (relop -> LESS_THAN .)
    FALSE           reduce using rule 82 (relop -> LESS_THAN .)
    TRUE            reduce using rule 82 (relop -> LESS_THAN .)
    CTE_STR         reduce using rule 82 (relop -> LESS_THAN .)
    CTE_FLT         reduce using rule 82 (relop -> LESS_THAN .)
    CTE_NUM         reduce using rule 82 (relop -> LESS_THAN .)
    ID              reduce using rule 82 (relop -> LESS_THAN .)


state 148

    (83) relop -> MORE_THAN .
    LPAREN          reduce using rule 83 (relop -> MORE_THAN .)
    FALSE           reduce using rule 83 (relop -> MORE_THAN .)
    TRUE            reduce using rule 83 (relop -> MORE_THAN .)
    CTE_STR         reduce using rule 83 (relop -> MORE_THAN .)
    CTE_FLT         reduce using rule 83 (relop -> MORE_THAN .)
    CTE_NUM         reduce using rule 83 (relop -> MORE_THAN .)
    ID              reduce using rule 83 (relop -> MORE_THAN .)


state 149

    (69) write_stmnt -> WRITE io1 LPAREN logic io2 . RPAREN io3 SEMICLN
    RPAREN          shift and go to state 170


state 150

    (68) read_stmnt -> READ io1 LPAREN logic io2 . RPAREN io3 SEMICLN
    RPAREN          shift and go to state 171


state 151

    (65) ret_stmnt -> RETURN LPAREN logic retval RPAREN . rettrue SEMICLN
    (66) rettrue -> .
    SEMICLN         reduce using rule 66 (rettrue -> .)

    rettrue                        shift and go to state 172

state 152

    (55) func_stmnt -> ID fc1 LPAREN fc2 arg . fc4 RPAREN fc5 SEMICLN
    (61) fc4 -> .
    RPAREN          reduce using rule 61 (fc4 -> .)

    fc4                            shift and go to state 173

state 153

    (58) arg -> empty .
    RPAREN          reduce using rule 58 (arg -> empty .)
    COMMA           reduce using rule 58 (arg -> empty .)


state 154

    (59) arg -> logic . fc3 multiarg
    (60) fc3 -> .
    COMMA           reduce using rule 60 (fc3 -> .)
    RPAREN          reduce using rule 60 (fc3 -> .)

    fc3                            shift and go to state 174

state 155

    (47) ass_stmnt -> ID ass1 arraccess ASS ass2 . logic ass3 SEMICLN
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    logic                          shift and go to state 175
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 156

    (49) arraccess -> LSQUARE exp tam . RSQUARE
    RSQUARE         shift and go to state 176


state 157

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY . varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (5) varsdecl -> . empty
    (6) varsdecl -> . VARS prog3 multivd multid
    (124) empty -> .
    VARS            shift and go to state 9
    WHILE           reduce using rule 124 (empty -> .)
    IF              reduce using rule 124 (empty -> .)
    WRITE           reduce using rule 124 (empty -> .)
    READ            reduce using rule 124 (empty -> .)
    RETURN          reduce using rule 124 (empty -> .)
    ID              reduce using rule 124 (empty -> .)
    RCURLY          reduce using rule 124 (empty -> .)

    varsdecl                       shift and go to state 177
    empty                          shift and go to state 8

state 158

    (31) param -> tipo param1 COLON ID . param2 multiparam
    (33) param2 -> .
    COMMA           reduce using rule 33 (param2 -> .)
    RPAREN          reduce using rule 33 (param2 -> .)

    param2                         shift and go to state 178

state 159

    (89) exp -> term exp2 SUB exp1 . exp
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    term                           shift and go to state 81
    exp                            shift and go to state 179
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 160

    (90) exp -> term exp2 SUM exp1 . exp
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    term                           shift and go to state 81
    exp                            shift and go to state 180
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 161

    (94) term -> factor term2 DIV term1 . term
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    factor                         shift and go to state 82
    term                           shift and go to state 181
    func_exp                       shift and go to state 84

state 162

    (95) term -> factor term2 MULT term1 . term
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    factor                         shift and go to state 82
    term                           shift and go to state 182
    func_exp                       shift and go to state 84

state 163

    (54) func_exp -> ID fc1 LPAREN fc2 . arg fc4 RPAREN fc5
    (58) arg -> . empty
    (59) arg -> . logic fc3 multiarg
    (124) empty -> .
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    RPAREN          reduce using rule 124 (empty -> .)
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    arg                            shift and go to state 183
    empty                          shift and go to state 153
    logic                          shift and go to state 154
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 164

    (9) multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .
    COMMA           reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    FUNC            reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    MAIN            reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    WHILE           reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    IF              reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    WRITE           reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    READ            reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    RETURN          reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    ID              reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    RCURLY          reduce using rule 9 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)


state 165

    (120) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN . stmnt while3 END
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    END             reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    stmnt                          shift and go to state 184
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 166

    (114) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt . else_stmnt END if2
    (117) else_stmnt -> . empty
    (118) else_stmnt -> . ELSE else1 stmnt
    (124) empty -> .
    ELSE            shift and go to state 187
    END             reduce using rule 124 (empty -> .)

    else_stmnt                     shift and go to state 185
    empty                          shift and go to state 186

state 167

    (73) logic -> rel log2 OR log1 . logic
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    rel                            shift and go to state 94
    logic                          shift and go to state 188
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 168

    (74) logic -> rel log2 AND log1 . logic
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    rel                            shift and go to state 94
    logic                          shift and go to state 189
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 169

    (84) rel -> exp rel2 relop rel1 . LPAREN rel RPAREN
    (85) rel -> exp rel2 relop rel1 . rel
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 190
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    exp                            shift and go to state 95
    rel                            shift and go to state 191
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 170

    (69) write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN . io3 SEMICLN
    (72) io3 -> .
    SEMICLN         reduce using rule 72 (io3 -> .)

    io3                            shift and go to state 192

state 171

    (68) read_stmnt -> READ io1 LPAREN logic io2 RPAREN . io3 SEMICLN
    (72) io3 -> .
    SEMICLN         reduce using rule 72 (io3 -> .)

    io3                            shift and go to state 193

state 172

    (65) ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue . SEMICLN
    SEMICLN         shift and go to state 194


state 173

    (55) func_stmnt -> ID fc1 LPAREN fc2 arg fc4 . RPAREN fc5 SEMICLN
    RPAREN          shift and go to state 195


state 174

    (59) arg -> logic fc3 . multiarg
    (63) multiarg -> . empty
    (64) multiarg -> . COMMA arg multiarg
    (124) empty -> .
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 198
    RPAREN          reduce using rule 124 (empty -> .)

    multiarg                       shift and go to state 196
    empty                          shift and go to state 197

state 175

    (47) ass_stmnt -> ID ass1 arraccess ASS ass2 logic . ass3 SEMICLN
    (53) ass3 -> .
    SEMICLN         reduce using rule 53 (ass3 -> .)

    ass3                           shift and go to state 199

state 176

    (49) arraccess -> LSQUARE exp tam RSQUARE .
    ASS             reduce using rule 49 (arraccess -> LSQUARE exp tam RSQUARE .)


state 177

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl . func4 stmnt RCURLY resetvarcont funcdecl
    (26) func4 -> .
    WHILE           reduce using rule 26 (func4 -> .)
    IF              reduce using rule 26 (func4 -> .)
    WRITE           reduce using rule 26 (func4 -> .)
    READ            reduce using rule 26 (func4 -> .)
    RETURN          reduce using rule 26 (func4 -> .)
    ID              reduce using rule 26 (func4 -> .)
    RCURLY          reduce using rule 26 (func4 -> .)

    func4                          shift and go to state 200

state 178

    (31) param -> tipo param1 COLON ID param2 . multiparam
    (34) multiparam -> . empty
    (35) multiparam -> . COMMA param
    (124) empty -> .
    COMMA           shift and go to state 203
    RPAREN          reduce using rule 124 (empty -> .)

    multiparam                     shift and go to state 201
    empty                          shift and go to state 202

state 179

    (89) exp -> term exp2 SUB exp1 exp .
    RSQUARE         reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    EQUAL_TO        reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    DIFFERENT_TO    reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    LESS_OR_EQ_THAN reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    MORE_OR_EQ_THAN reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    LESS_THAN       reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    MORE_THAN       reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    OR              reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    AND             reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    RPAREN          reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    COMMA           reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)
    SEMICLN         reduce using rule 89 (exp -> term exp2 SUB exp1 exp .)


state 180

    (90) exp -> term exp2 SUM exp1 exp .
    RSQUARE         reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    EQUAL_TO        reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    DIFFERENT_TO    reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    LESS_OR_EQ_THAN reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    MORE_OR_EQ_THAN reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    LESS_THAN       reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    MORE_THAN       reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    OR              reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    AND             reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    RPAREN          reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    COMMA           reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)
    SEMICLN         reduce using rule 90 (exp -> term exp2 SUM exp1 exp .)


state 181

    (94) term -> factor term2 DIV term1 term .
    SUB             reduce using rule 94 (term -> factor term2 DIV term1 term .)
    SUM             reduce using rule 94 (term -> factor term2 DIV term1 term .)
    RSQUARE         reduce using rule 94 (term -> factor term2 DIV term1 term .)
    EQUAL_TO        reduce using rule 94 (term -> factor term2 DIV term1 term .)
    DIFFERENT_TO    reduce using rule 94 (term -> factor term2 DIV term1 term .)
    LESS_OR_EQ_THAN reduce using rule 94 (term -> factor term2 DIV term1 term .)
    MORE_OR_EQ_THAN reduce using rule 94 (term -> factor term2 DIV term1 term .)
    LESS_THAN       reduce using rule 94 (term -> factor term2 DIV term1 term .)
    MORE_THAN       reduce using rule 94 (term -> factor term2 DIV term1 term .)
    OR              reduce using rule 94 (term -> factor term2 DIV term1 term .)
    AND             reduce using rule 94 (term -> factor term2 DIV term1 term .)
    RPAREN          reduce using rule 94 (term -> factor term2 DIV term1 term .)
    COMMA           reduce using rule 94 (term -> factor term2 DIV term1 term .)
    SEMICLN         reduce using rule 94 (term -> factor term2 DIV term1 term .)


state 182

    (95) term -> factor term2 MULT term1 term .
    SUB             reduce using rule 95 (term -> factor term2 MULT term1 term .)
    SUM             reduce using rule 95 (term -> factor term2 MULT term1 term .)
    RSQUARE         reduce using rule 95 (term -> factor term2 MULT term1 term .)
    EQUAL_TO        reduce using rule 95 (term -> factor term2 MULT term1 term .)
    DIFFERENT_TO    reduce using rule 95 (term -> factor term2 MULT term1 term .)
    LESS_OR_EQ_THAN reduce using rule 95 (term -> factor term2 MULT term1 term .)
    MORE_OR_EQ_THAN reduce using rule 95 (term -> factor term2 MULT term1 term .)
    LESS_THAN       reduce using rule 95 (term -> factor term2 MULT term1 term .)
    MORE_THAN       reduce using rule 95 (term -> factor term2 MULT term1 term .)
    OR              reduce using rule 95 (term -> factor term2 MULT term1 term .)
    AND             reduce using rule 95 (term -> factor term2 MULT term1 term .)
    RPAREN          reduce using rule 95 (term -> factor term2 MULT term1 term .)
    COMMA           reduce using rule 95 (term -> factor term2 MULT term1 term .)
    SEMICLN         reduce using rule 95 (term -> factor term2 MULT term1 term .)


state 183

    (54) func_exp -> ID fc1 LPAREN fc2 arg . fc4 RPAREN fc5
    (61) fc4 -> .
    RPAREN          reduce using rule 61 (fc4 -> .)

    fc4                            shift and go to state 204

state 184

    (120) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt . while3 END
    (123) while3 -> .
    END             reduce using rule 123 (while3 -> .)

    while3                         shift and go to state 205

state 185

    (114) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt . END if2
    END             shift and go to state 206


state 186

    (117) else_stmnt -> empty .
    END             reduce using rule 117 (else_stmnt -> empty .)


state 187

    (118) else_stmnt -> ELSE . else1 stmnt
    (119) else1 -> .
    WHILE           reduce using rule 119 (else1 -> .)
    IF              reduce using rule 119 (else1 -> .)
    WRITE           reduce using rule 119 (else1 -> .)
    READ            reduce using rule 119 (else1 -> .)
    RETURN          reduce using rule 119 (else1 -> .)
    ID              reduce using rule 119 (else1 -> .)
    END             reduce using rule 119 (else1 -> .)

    else1                          shift and go to state 207

state 188

    (73) logic -> rel log2 OR log1 logic .
    RPAREN          reduce using rule 73 (logic -> rel log2 OR log1 logic .)
    COMMA           reduce using rule 73 (logic -> rel log2 OR log1 logic .)
    SEMICLN         reduce using rule 73 (logic -> rel log2 OR log1 logic .)


state 189

    (74) logic -> rel log2 AND log1 logic .
    RPAREN          reduce using rule 74 (logic -> rel log2 AND log1 logic .)
    COMMA           reduce using rule 74 (logic -> rel log2 AND log1 logic .)
    SEMICLN         reduce using rule 74 (logic -> rel log2 AND log1 logic .)


state 190

    (84) rel -> exp rel2 relop rel1 LPAREN . rel RPAREN
    (99) factor -> LPAREN . logic RPAREN
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    exp                            shift and go to state 95
    rel                            shift and go to state 208
    logic                          shift and go to state 108
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 191

    (85) rel -> exp rel2 relop rel1 rel .
    OR              reduce using rule 85 (rel -> exp rel2 relop rel1 rel .)
    AND             reduce using rule 85 (rel -> exp rel2 relop rel1 rel .)
    RPAREN          reduce using rule 85 (rel -> exp rel2 relop rel1 rel .)
    COMMA           reduce using rule 85 (rel -> exp rel2 relop rel1 rel .)
    SEMICLN         reduce using rule 85 (rel -> exp rel2 relop rel1 rel .)


state 192

    (69) write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 . SEMICLN
    SEMICLN         shift and go to state 209


state 193

    (68) read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 . SEMICLN
    SEMICLN         shift and go to state 210


state 194

    (65) ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .
    WHILE           reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    IF              reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    WRITE           reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    READ            reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    RETURN          reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    ID              reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    $end            reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    ELSE            reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    END             reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)
    RCURLY          reduce using rule 65 (ret_stmnt -> RETURN LPAREN logic retval RPAREN rettrue SEMICLN .)


state 195

    (55) func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN . fc5 SEMICLN
    (62) fc5 -> .
    SEMICLN         reduce using rule 62 (fc5 -> .)

    fc5                            shift and go to state 211

state 196

    (59) arg -> logic fc3 multiarg .
    RPAREN          reduce using rule 59 (arg -> logic fc3 multiarg .)
    COMMA           reduce using rule 59 (arg -> logic fc3 multiarg .)


state 197

    (63) multiarg -> empty .
    COMMA           reduce using rule 63 (multiarg -> empty .)
    RPAREN          reduce using rule 63 (multiarg -> empty .)


state 198

    (64) multiarg -> COMMA . arg multiarg
    (58) arg -> . empty
    (59) arg -> . logic fc3 multiarg
    (124) empty -> .
    (73) logic -> . rel log2 OR log1 logic
    (74) logic -> . rel log2 AND log1 logic
    (75) logic -> . rel log2
    (84) rel -> . exp rel2 relop rel1 LPAREN rel RPAREN
    (85) rel -> . exp rel2 relop rel1 rel
    (86) rel -> . exp rel2
    (89) exp -> . term exp2 SUB exp1 exp
    (90) exp -> . term exp2 SUM exp1 exp
    (91) exp -> . term exp2
    (94) term -> . factor term2 DIV term1 term
    (95) term -> . factor term2 MULT term1 term
    (96) term -> . factor term2
    (99) factor -> . LPAREN logic RPAREN
    (100) factor -> . func_exp
    (101) factor -> . FALSE ctes4
    (102) factor -> . TRUE ctes4
    (103) factor -> . CTE_STR ctes3
    (104) factor -> . CTE_FLT ctes2
    (105) factor -> . CTE_NUM ctes1
    (106) factor -> . ID fact1 arr
    (54) func_exp -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5
    COMMA           reduce using rule 124 (empty -> .)
    RPAREN          reduce using rule 124 (empty -> .)
    LPAREN          shift and go to state 83
    FALSE           shift and go to state 85
    TRUE            shift and go to state 86
    CTE_STR         shift and go to state 87
    CTE_FLT         shift and go to state 88
    CTE_NUM         shift and go to state 89
    ID              shift and go to state 90

    arg                            shift and go to state 212
    empty                          shift and go to state 153
    logic                          shift and go to state 154
    rel                            shift and go to state 94
    exp                            shift and go to state 95
    term                           shift and go to state 81
    factor                         shift and go to state 82
    func_exp                       shift and go to state 84

state 199

    (47) ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 . SEMICLN
    SEMICLN         shift and go to state 213


state 200

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 . stmnt RCURLY resetvarcont funcdecl
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    RCURLY          reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    stmnt                          shift and go to state 214
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 201

    (31) param -> tipo param1 COLON ID param2 multiparam .
    RPAREN          reduce using rule 31 (param -> tipo param1 COLON ID param2 multiparam .)


state 202

    (34) multiparam -> empty .
    RPAREN          reduce using rule 34 (multiparam -> empty .)


state 203

    (35) multiparam -> COMMA . param
    (30) param -> . empty
    (31) param -> . tipo param1 COLON ID param2 multiparam
    (124) empty -> .
    (14) tipo -> . BOOL
    (15) tipo -> . CHAR
    (16) tipo -> . FLOAT
    (17) tipo -> . INT
    RPAREN          reduce using rule 124 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    param                          shift and go to state 215
    empty                          shift and go to state 77
    tipo                           shift and go to state 78

state 204

    (54) func_exp -> ID fc1 LPAREN fc2 arg fc4 . RPAREN fc5
    RPAREN          shift and go to state 216


state 205

    (120) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 . END
    END             shift and go to state 217


state 206

    (114) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END . if2
    (116) if2 -> .
    WHILE           reduce using rule 116 (if2 -> .)
    IF              reduce using rule 116 (if2 -> .)
    WRITE           reduce using rule 116 (if2 -> .)
    READ            reduce using rule 116 (if2 -> .)
    RETURN          reduce using rule 116 (if2 -> .)
    ID              reduce using rule 116 (if2 -> .)
    $end            reduce using rule 116 (if2 -> .)
    ELSE            reduce using rule 116 (if2 -> .)
    END             reduce using rule 116 (if2 -> .)
    RCURLY          reduce using rule 116 (if2 -> .)

    if2                            shift and go to state 218

state 207

    (118) else_stmnt -> ELSE else1 . stmnt
    (39) stmnt -> . empty
    (40) stmnt -> . while_stmnt stmnt
    (41) stmnt -> . if_stmnt stmnt
    (42) stmnt -> . write_stmnt stmnt
    (43) stmnt -> . read_stmnt stmnt
    (44) stmnt -> . ret_stmnt stmnt
    (45) stmnt -> . func_stmnt stmnt
    (46) stmnt -> . ass_stmnt stmnt
    (124) empty -> .
    (120) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (114) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (69) write_stmnt -> . WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (68) read_stmnt -> . READ io1 LPAREN logic io2 RPAREN io3 SEMICLN
    (65) ret_stmnt -> . RETURN LPAREN logic retval RPAREN rettrue SEMICLN
    (55) func_stmnt -> . ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN
    (47) ass_stmnt -> . ID ass1 arraccess ASS ass2 logic ass3 SEMICLN
    END             reduce using rule 124 (empty -> .)
    WHILE           shift and go to state 50
    IF              shift and go to state 51
    WRITE           shift and go to state 52
    READ            shift and go to state 53
    RETURN          shift and go to state 54
    ID              shift and go to state 55

    stmnt                          shift and go to state 219
    empty                          shift and go to state 42
    while_stmnt                    shift and go to state 43
    if_stmnt                       shift and go to state 44
    write_stmnt                    shift and go to state 45
    read_stmnt                     shift and go to state 46
    ret_stmnt                      shift and go to state 47
    func_stmnt                     shift and go to state 48
    ass_stmnt                      shift and go to state 49

state 208

    (84) rel -> exp rel2 relop rel1 LPAREN rel . RPAREN
    (73) logic -> rel . log2 OR log1 logic
    (74) logic -> rel . log2 AND log1 logic
    (75) logic -> rel . log2
    (77) log2 -> .
  ! shift/reduce conflict for RPAREN resolved as shift
    RPAREN          shift and go to state 220
    OR              reduce using rule 77 (log2 -> .)
    AND             reduce using rule 77 (log2 -> .)

    log2                           shift and go to state 119

state 209

    (69) write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .
    WHILE           reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    IF              reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    WRITE           reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    READ            reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    RETURN          reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    ID              reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    $end            reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    ELSE            reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    END             reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    RCURLY          reduce using rule 69 (write_stmnt -> WRITE io1 LPAREN logic io2 RPAREN io3 SEMICLN .)


state 210

    (68) read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .
    WHILE           reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    IF              reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    WRITE           reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    READ            reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    RETURN          reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    ID              reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    $end            reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    ELSE            reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    END             reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)
    RCURLY          reduce using rule 68 (read_stmnt -> READ io1 LPAREN logic io2 RPAREN io3 SEMICLN .)


state 211

    (55) func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 . SEMICLN
    SEMICLN         shift and go to state 221


state 212

    (64) multiarg -> COMMA arg . multiarg
    (63) multiarg -> . empty
    (64) multiarg -> . COMMA arg multiarg
    (124) empty -> .
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 198
    RPAREN          reduce using rule 124 (empty -> .)

    multiarg                       shift and go to state 222
    empty                          shift and go to state 197

state 213

    (47) ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .
    WHILE           reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    IF              reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    WRITE           reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    READ            reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    RETURN          reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    ID              reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    $end            reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    ELSE            reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    END             reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)
    RCURLY          reduce using rule 47 (ass_stmnt -> ID ass1 arraccess ASS ass2 logic ass3 SEMICLN .)


state 214

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt . RCURLY resetvarcont funcdecl
    RCURLY          shift and go to state 223


state 215

    (35) multiparam -> COMMA param .
    RPAREN          reduce using rule 35 (multiparam -> COMMA param .)


state 216

    (54) func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN . fc5
    (62) fc5 -> .
    DIV             reduce using rule 62 (fc5 -> .)
    MULT            reduce using rule 62 (fc5 -> .)
    SUB             reduce using rule 62 (fc5 -> .)
    SUM             reduce using rule 62 (fc5 -> .)
    RSQUARE         reduce using rule 62 (fc5 -> .)
    EQUAL_TO        reduce using rule 62 (fc5 -> .)
    DIFFERENT_TO    reduce using rule 62 (fc5 -> .)
    LESS_OR_EQ_THAN reduce using rule 62 (fc5 -> .)
    MORE_OR_EQ_THAN reduce using rule 62 (fc5 -> .)
    LESS_THAN       reduce using rule 62 (fc5 -> .)
    MORE_THAN       reduce using rule 62 (fc5 -> .)
    OR              reduce using rule 62 (fc5 -> .)
    AND             reduce using rule 62 (fc5 -> .)
    RPAREN          reduce using rule 62 (fc5 -> .)
    COMMA           reduce using rule 62 (fc5 -> .)
    SEMICLN         reduce using rule 62 (fc5 -> .)

    fc5                            shift and go to state 224

state 217

    (120) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .
    WHILE           reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    IF              reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    WRITE           reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    READ            reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    RETURN          reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    ID              reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    $end            reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    ELSE            reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    END             reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    RCURLY          reduce using rule 120 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)


state 218

    (114) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .
    WHILE           reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    IF              reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    WRITE           reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    READ            reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    RETURN          reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    ID              reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    $end            reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    ELSE            reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    END             reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    RCURLY          reduce using rule 114 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)


state 219

    (118) else_stmnt -> ELSE else1 stmnt .
    END             reduce using rule 118 (else_stmnt -> ELSE else1 stmnt .)


state 220

    (84) rel -> exp rel2 relop rel1 LPAREN rel RPAREN .
    OR              reduce using rule 84 (rel -> exp rel2 relop rel1 LPAREN rel RPAREN .)
    AND             reduce using rule 84 (rel -> exp rel2 relop rel1 LPAREN rel RPAREN .)
    RPAREN          reduce using rule 84 (rel -> exp rel2 relop rel1 LPAREN rel RPAREN .)
    COMMA           reduce using rule 84 (rel -> exp rel2 relop rel1 LPAREN rel RPAREN .)
    SEMICLN         reduce using rule 84 (rel -> exp rel2 relop rel1 LPAREN rel RPAREN .)


state 221

    (55) func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .
    WHILE           reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    IF              reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    WRITE           reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    READ            reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    RETURN          reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    ID              reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    $end            reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    ELSE            reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    END             reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)
    RCURLY          reduce using rule 55 (func_stmnt -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 SEMICLN .)


state 222

    (64) multiarg -> COMMA arg multiarg .
    COMMA           reduce using rule 64 (multiarg -> COMMA arg multiarg .)
    RPAREN          reduce using rule 64 (multiarg -> COMMA arg multiarg .)


state 223

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY . resetvarcont funcdecl
    (27) resetvarcont -> .
    FUNC            reduce using rule 27 (resetvarcont -> .)
    MAIN            reduce using rule 27 (resetvarcont -> .)

    resetvarcont                   shift and go to state 225

state 224

    (54) func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .
    DIV             reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    MULT            reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    SUB             reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    SUM             reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    RSQUARE         reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    EQUAL_TO        reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    DIFFERENT_TO    reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    LESS_OR_EQ_THAN reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    MORE_OR_EQ_THAN reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    LESS_THAN       reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    MORE_THAN       reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    OR              reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    AND             reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    RPAREN          reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    COMMA           reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)
    SEMICLN         reduce using rule 54 (func_exp -> ID fc1 LPAREN fc2 arg fc4 RPAREN fc5 .)


state 225

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont . funcdecl
    (21) funcdecl -> . empty
    (22) funcdecl -> . FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl
    (124) empty -> .
    FUNC            shift and go to state 12
    MAIN            reduce using rule 124 (empty -> .)

    funcdecl                       shift and go to state 226
    empty                          shift and go to state 11

state 226

    (22) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl .
    MAIN            reduce using rule 22 (funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt RCURLY resetvarcont funcdecl .)


Conflicts:

shift/reduce conflict for COMMA in state 174 resolved as shift
shift/reduce conflict for RPAREN in state 208 resolved as shift
shift/reduce conflict for COMMA in state 212 resolved as shift