Grammar:

Rule 0     S' -> program
Rule 1     program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main
Rule 2     prog1 -> <empty>
Rule 3     prog2 -> <empty>
Rule 4     varsdecl -> empty
Rule 5     varsdecl -> VARS prog3 multivd multid
Rule 6     prog3 -> <empty>
Rule 7     multivd -> empty
Rule 8     multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd
Rule 9     prog4 -> <empty>
Rule 10    prog5 -> <empty>
Rule 11    multid -> empty
Rule 12    multid -> COMMA ID prog5 arr multid
Rule 13    tipo -> BOOL
Rule 14    tipo -> CHAR
Rule 15    tipo -> FLOAT
Rule 16    tipo -> INT
Rule 17    arr -> empty
Rule 18    arr -> LSQUARE exp RSQUARE
Rule 19    funcdecl -> empty
Rule 20    funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
Rule 21    func1 -> <empty>
Rule 22    func2 -> <empty>
Rule 23    func3 -> <empty>
Rule 24    func4 -> <empty>
Rule 25    resetvarcont -> <empty>
Rule 26    tipofunc -> tipo
Rule 27    tipofunc -> VOID
Rule 28    param -> empty
Rule 29    param -> tipo param1 COLON ID param2 multiparam
Rule 30    param1 -> <empty>
Rule 31    param2 -> <empty>
Rule 32    multiparam -> empty
Rule 33    multiparam -> COMMA param
Rule 34    main -> MAIN LPAREN RPAREN stmnt
Rule 35    stmnt -> empty
Rule 36    stmnt -> while_stmnt stmnt
Rule 37    stmnt -> if_stmnt stmnt
Rule 38    stmnt -> write_stmnt stmnt
Rule 39    stmnt -> read_stmnt stmnt
Rule 40    stmnt -> ret_stmnt stmnt
Rule 41    stmnt -> func_stmnt stmnt
Rule 42    stmnt -> ass_stmnt stmnt
Rule 43    ass_stmnt -> ID arr ASS func_stmnt SEMICLN
Rule 44    ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN
Rule 45    ass1 -> <empty>
Rule 46    ass2 -> <empty>
Rule 47    ass3 -> <empty>
Rule 48    func_stmnt -> ID LPAREN arg RPAREN SEMICLN
Rule 49    arg -> empty
Rule 50    arg -> logic multiarg
Rule 51    multiarg -> empty
Rule 52    multiarg -> COMMA arg multiarg
Rule 53    ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN
Rule 54    read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
Rule 55    write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
Rule 56    multio -> <empty>
Rule 57    multio -> COMMA logic io2 multio
Rule 58    io1 -> <empty>
Rule 59    io2 -> <empty>
Rule 60    io3 -> <empty>
Rule 61    logic -> rel log2 OR log1 logic
Rule 62    logic -> rel log2 AND log1 logic
Rule 63    logic -> rel log2
Rule 64    log1 -> <empty>
Rule 65    log2 -> <empty>
Rule 66    relop -> EQUAL_TO
Rule 67    relop -> DIFFERENT_TO
Rule 68    relop -> LESS_OR_EQ_THAN
Rule 69    relop -> MORE_OR_EQ_THAN
Rule 70    relop -> LESS_THAN
Rule 71    relop -> MORE_THAN
Rule 72    rel -> exp rel2 relop rel1 rel
Rule 73    rel -> exp rel2
Rule 74    rel1 -> <empty>
Rule 75    rel2 -> <empty>
Rule 76    exp -> term exp2 SUB exp1 exp
Rule 77    exp -> term exp2 SUM exp1 exp
Rule 78    exp -> term exp2
Rule 79    exp2 -> <empty>
Rule 80    exp1 -> <empty>
Rule 81    term -> factor term2 DIV term1 term
Rule 82    term -> factor term2 MULT term1 term
Rule 83    term -> factor term2
Rule 84    term1 -> <empty>
Rule 85    term2 -> <empty>
Rule 86    factor -> FALSE ctes4
Rule 87    factor -> TRUE ctes4
Rule 88    factor -> CTE_STR ctes3
Rule 89    factor -> CTE_FLT ctes2
Rule 90    factor -> CTE_NUM ctes1
Rule 91    factor -> ID fact1 LPAREN logic multiexp RPAREN
Rule 92    factor -> ID fact1 arr
Rule 93    ctes1 -> <empty>
Rule 94    ctes2 -> <empty>
Rule 95    ctes3 -> <empty>
Rule 96    ctes4 -> <empty>
Rule 97    fact1 -> <empty>
Rule 98    multiexp -> empty
Rule 99    multiexp -> COMMA logic multiexp
Rule 100   if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
Rule 101   if1 -> <empty>
Rule 102   if2 -> <empty>
Rule 103   else_stmnt -> empty
Rule 104   else_stmnt -> ELSE else1 stmnt
Rule 105   else1 -> <empty>
Rule 106   while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
Rule 107   while1 -> <empty>
Rule 108   while2 -> <empty>
Rule 109   while3 -> <empty>
Rule 110   empty -> <empty>

Terminals, with rules where they appear:

AND                  : 62
ASS                  : 43 44
BOOL                 : 13
CHAR                 : 14
COLON                : 8 29
COMMA                : 12 33 52 57 99
CTE_FLT              : 89
CTE_NUM              : 90
CTE_STR              : 88
DIFFERENT_TO         : 67
DIV                  : 81
ELSE                 : 104
END                  : 100 106
EQUAL_TO             : 66
FALSE                : 86
FLOAT                : 15
FUNC                 : 20
ID                   : 1 8 12 20 29 43 44 48 91 92
IF                   : 100
INT                  : 16
LCURLY               : 20
LESS_OR_EQ_THAN      : 68
LESS_THAN            : 70
LPAREN               : 20 34 48 53 54 55 91 100 106
LSQUARE              : 18
MAIN                 : 34
MORE_OR_EQ_THAN      : 69
MORE_THAN            : 71
MULT                 : 82
OR                   : 61
PROGRAM              : 1
RCURLY               : 20
READ                 : 54
RETURN               : 53
RPAREN               : 20 34 48 53 54 55 91 100 106
RSQUARE              : 18
SEMICLN              : 1 8 43 44 48 53 54 55
SUB                  : 76
SUM                  : 77
TRUE                 : 87
VARS                 : 5
VOID                 : 27
WHILE                : 106
WRITE                : 55
error                : 

Nonterminals, with rules where they appear:

arg                  : 48 52
arr                  : 8 12 43 44 92
ass1                 : 44
ass2                 : 44
ass3                 : 44
ass_stmnt            : 42
ctes1                : 90
ctes2                : 89
ctes3                : 88
ctes4                : 86 87
else1                : 104
else_stmnt           : 100
empty                : 4 7 11 17 19 28 32 35 49 51 98 103
exp                  : 18 72 73 76 77
exp1                 : 76 77
exp2                 : 76 77 78
fact1                : 91 92
factor               : 81 82 83
func1                : 20
func2                : 20
func3                : 20
func4                : 20
func_stmnt           : 41 43
funcdecl             : 1 20
if1                  : 100
if2                  : 100
if_stmnt             : 37
io1                  : 54 55
io2                  : 54 55 57
io3                  : 54 55
log1                 : 61 62
log2                 : 61 62 63
logic                : 44 50 53 54 55 57 61 62 91 99 100 106
main                 : 1
multiarg             : 50 52
multid               : 5 8 12
multiexp             : 91 99
multio               : 54 55 57
multiparam           : 29
multivd              : 5 8
param                : 20 33
param1               : 29
param2               : 29
prog1                : 1
prog2                : 1
prog3                : 5
prog4                : 8
prog5                : 8 12
program              : 0
read_stmnt           : 39
rel                  : 61 62 63 72
rel1                 : 72
rel2                 : 72 73
relop                : 72
resetvarcont         : 20
ret_stmnt            : 40
stmnt                : 20 34 36 37 38 39 40 41 42 100 104 106
term                 : 76 77 78 81 82
term1                : 81 82
term2                : 81 82 83
tipo                 : 8 26 29
tipofunc             : 20
varsdecl             : 1 20
while1               : 106
while2               : 106
while3               : 106
while_stmnt          : 36
write_stmnt          : 38


state 0

    (0) S' -> . program
    (1) program -> . PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main
    PROGRAM         shift and go to state 2

    program                        shift and go to state 1

state 1

    (0) S' -> program .


state 2

    (1) program -> PROGRAM . prog1 ID prog2 SEMICLN varsdecl funcdecl main
    (2) prog1 -> .
    ID              reduce using rule 2 (prog1 -> .)

    prog1                          shift and go to state 3

state 3

    (1) program -> PROGRAM prog1 . ID prog2 SEMICLN varsdecl funcdecl main
    ID              shift and go to state 4


state 4

    (1) program -> PROGRAM prog1 ID . prog2 SEMICLN varsdecl funcdecl main
    (3) prog2 -> .
    SEMICLN         reduce using rule 3 (prog2 -> .)

    prog2                          shift and go to state 5

state 5

    (1) program -> PROGRAM prog1 ID prog2 . SEMICLN varsdecl funcdecl main
    SEMICLN         shift and go to state 6


state 6

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN . varsdecl funcdecl main
    (4) varsdecl -> . empty
    (5) varsdecl -> . VARS prog3 multivd multid
    (110) empty -> .
    VARS            shift and go to state 9
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)

    varsdecl                       shift and go to state 7
    empty                          shift and go to state 8

state 7

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl . funcdecl main
    (19) funcdecl -> . empty
    (20) funcdecl -> . FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (110) empty -> .
    FUNC            shift and go to state 12
    MAIN            reduce using rule 110 (empty -> .)

    funcdecl                       shift and go to state 10
    empty                          shift and go to state 11

state 8

    (4) varsdecl -> empty .
    FUNC            reduce using rule 4 (varsdecl -> empty .)
    MAIN            reduce using rule 4 (varsdecl -> empty .)
    WHILE           reduce using rule 4 (varsdecl -> empty .)
    IF              reduce using rule 4 (varsdecl -> empty .)
    WRITE           reduce using rule 4 (varsdecl -> empty .)
    READ            reduce using rule 4 (varsdecl -> empty .)
    RETURN          reduce using rule 4 (varsdecl -> empty .)
    ID              reduce using rule 4 (varsdecl -> empty .)
    RCURLY          reduce using rule 4 (varsdecl -> empty .)


state 9

    (5) varsdecl -> VARS . prog3 multivd multid
    (6) prog3 -> .
    BOOL            reduce using rule 6 (prog3 -> .)
    CHAR            reduce using rule 6 (prog3 -> .)
    FLOAT           reduce using rule 6 (prog3 -> .)
    INT             reduce using rule 6 (prog3 -> .)
    COMMA           reduce using rule 6 (prog3 -> .)
    FUNC            reduce using rule 6 (prog3 -> .)
    MAIN            reduce using rule 6 (prog3 -> .)
    WHILE           reduce using rule 6 (prog3 -> .)
    IF              reduce using rule 6 (prog3 -> .)
    WRITE           reduce using rule 6 (prog3 -> .)
    READ            reduce using rule 6 (prog3 -> .)
    RETURN          reduce using rule 6 (prog3 -> .)
    ID              reduce using rule 6 (prog3 -> .)
    RCURLY          reduce using rule 6 (prog3 -> .)

    prog3                          shift and go to state 13

state 10

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl . main
    (34) main -> . MAIN LPAREN RPAREN stmnt
    MAIN            shift and go to state 15

    main                           shift and go to state 14

state 11

    (19) funcdecl -> empty .
    MAIN            reduce using rule 19 (funcdecl -> empty .)


state 12

    (20) funcdecl -> FUNC . tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (26) tipofunc -> . tipo
    (27) tipofunc -> . VOID
    (13) tipo -> . BOOL
    (14) tipo -> . CHAR
    (15) tipo -> . FLOAT
    (16) tipo -> . INT
    VOID            shift and go to state 18
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    tipofunc                       shift and go to state 16
    tipo                           shift and go to state 17

state 13

    (5) varsdecl -> VARS prog3 . multivd multid
    (7) multivd -> . empty
    (8) multivd -> . tipo prog4 COLON ID prog5 arr multid SEMICLN multivd
    (110) empty -> .
    (13) tipo -> . BOOL
    (14) tipo -> . CHAR
    (15) tipo -> . FLOAT
    (16) tipo -> . INT
    COMMA           reduce using rule 110 (empty -> .)
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    multivd                        shift and go to state 23
    empty                          shift and go to state 24
    tipo                           shift and go to state 25

state 14

    (1) program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main .
    $end            reduce using rule 1 (program -> PROGRAM prog1 ID prog2 SEMICLN varsdecl funcdecl main .)


state 15

    (34) main -> MAIN . LPAREN RPAREN stmnt
    LPAREN          shift and go to state 26


state 16

    (20) funcdecl -> FUNC tipofunc . func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (21) func1 -> .
    ID              reduce using rule 21 (func1 -> .)

    func1                          shift and go to state 27

state 17

    (26) tipofunc -> tipo .
    ID              reduce using rule 26 (tipofunc -> tipo .)


state 18

    (27) tipofunc -> VOID .
    ID              reduce using rule 27 (tipofunc -> VOID .)


state 19

    (13) tipo -> BOOL .
    ID              reduce using rule 13 (tipo -> BOOL .)
    COLON           reduce using rule 13 (tipo -> BOOL .)


state 20

    (14) tipo -> CHAR .
    ID              reduce using rule 14 (tipo -> CHAR .)
    COLON           reduce using rule 14 (tipo -> CHAR .)


state 21

    (15) tipo -> FLOAT .
    ID              reduce using rule 15 (tipo -> FLOAT .)
    COLON           reduce using rule 15 (tipo -> FLOAT .)


state 22

    (16) tipo -> INT .
    ID              reduce using rule 16 (tipo -> INT .)
    COLON           reduce using rule 16 (tipo -> INT .)


state 23

    (5) varsdecl -> VARS prog3 multivd . multid
    (11) multid -> . empty
    (12) multid -> . COMMA ID prog5 arr multid
    (110) empty -> .
    COMMA           shift and go to state 30
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    multid                         shift and go to state 28
    empty                          shift and go to state 29

state 24

    (7) multivd -> empty .
    COMMA           reduce using rule 7 (multivd -> empty .)
    FUNC            reduce using rule 7 (multivd -> empty .)
    MAIN            reduce using rule 7 (multivd -> empty .)
    WHILE           reduce using rule 7 (multivd -> empty .)
    IF              reduce using rule 7 (multivd -> empty .)
    WRITE           reduce using rule 7 (multivd -> empty .)
    READ            reduce using rule 7 (multivd -> empty .)
    RETURN          reduce using rule 7 (multivd -> empty .)
    ID              reduce using rule 7 (multivd -> empty .)
    RCURLY          reduce using rule 7 (multivd -> empty .)


state 25

    (8) multivd -> tipo . prog4 COLON ID prog5 arr multid SEMICLN multivd
    (9) prog4 -> .
    COLON           reduce using rule 9 (prog4 -> .)

    prog4                          shift and go to state 31

state 26

    (34) main -> MAIN LPAREN . RPAREN stmnt
    RPAREN          shift and go to state 32


state 27

    (20) funcdecl -> FUNC tipofunc func1 . ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    ID              shift and go to state 33


state 28

    (5) varsdecl -> VARS prog3 multivd multid .
    FUNC            reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    MAIN            reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    WHILE           reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    IF              reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    WRITE           reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    READ            reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    RETURN          reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    ID              reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)
    RCURLY          reduce using rule 5 (varsdecl -> VARS prog3 multivd multid .)


state 29

    (11) multid -> empty .
    FUNC            reduce using rule 11 (multid -> empty .)
    MAIN            reduce using rule 11 (multid -> empty .)
    WHILE           reduce using rule 11 (multid -> empty .)
    IF              reduce using rule 11 (multid -> empty .)
    WRITE           reduce using rule 11 (multid -> empty .)
    READ            reduce using rule 11 (multid -> empty .)
    RETURN          reduce using rule 11 (multid -> empty .)
    ID              reduce using rule 11 (multid -> empty .)
    RCURLY          reduce using rule 11 (multid -> empty .)
    SEMICLN         reduce using rule 11 (multid -> empty .)


state 30

    (12) multid -> COMMA . ID prog5 arr multid
    ID              shift and go to state 34


state 31

    (8) multivd -> tipo prog4 . COLON ID prog5 arr multid SEMICLN multivd
    COLON           shift and go to state 35


state 32

    (34) main -> MAIN LPAREN RPAREN . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    stmnt                          shift and go to state 36
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 33

    (20) funcdecl -> FUNC tipofunc func1 ID . func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (22) func2 -> .
    LPAREN          reduce using rule 22 (func2 -> .)

    func2                          shift and go to state 51

state 34

    (12) multid -> COMMA ID . prog5 arr multid
    (10) prog5 -> .
    LSQUARE         reduce using rule 10 (prog5 -> .)
    COMMA           reduce using rule 10 (prog5 -> .)
    FUNC            reduce using rule 10 (prog5 -> .)
    MAIN            reduce using rule 10 (prog5 -> .)
    WHILE           reduce using rule 10 (prog5 -> .)
    IF              reduce using rule 10 (prog5 -> .)
    WRITE           reduce using rule 10 (prog5 -> .)
    READ            reduce using rule 10 (prog5 -> .)
    RETURN          reduce using rule 10 (prog5 -> .)
    ID              reduce using rule 10 (prog5 -> .)
    RCURLY          reduce using rule 10 (prog5 -> .)
    SEMICLN         reduce using rule 10 (prog5 -> .)

    prog5                          shift and go to state 52

state 35

    (8) multivd -> tipo prog4 COLON . ID prog5 arr multid SEMICLN multivd
    ID              shift and go to state 53


state 36

    (34) main -> MAIN LPAREN RPAREN stmnt .
    $end            reduce using rule 34 (main -> MAIN LPAREN RPAREN stmnt .)


state 37

    (35) stmnt -> empty .
    $end            reduce using rule 35 (stmnt -> empty .)
    ELSE            reduce using rule 35 (stmnt -> empty .)
    END             reduce using rule 35 (stmnt -> empty .)
    RCURLY          reduce using rule 35 (stmnt -> empty .)


state 38

    (36) stmnt -> while_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    while_stmnt                    shift and go to state 38
    stmnt                          shift and go to state 54
    empty                          shift and go to state 37
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 39

    (37) stmnt -> if_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    if_stmnt                       shift and go to state 39
    stmnt                          shift and go to state 55
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 40

    (38) stmnt -> write_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    write_stmnt                    shift and go to state 40
    stmnt                          shift and go to state 56
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 41

    (39) stmnt -> read_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    read_stmnt                     shift and go to state 41
    stmnt                          shift and go to state 57
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 42

    (40) stmnt -> ret_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    ret_stmnt                      shift and go to state 42
    stmnt                          shift and go to state 58
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 43

    (41) stmnt -> func_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    func_stmnt                     shift and go to state 43
    stmnt                          shift and go to state 59
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    ass_stmnt                      shift and go to state 44

state 44

    (42) stmnt -> ass_stmnt . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    $end            reduce using rule 110 (empty -> .)
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    ass_stmnt                      shift and go to state 44
    stmnt                          shift and go to state 60
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43

state 45

    (106) while_stmnt -> WHILE . while1 LPAREN logic while2 RPAREN stmnt while3 END
    (107) while1 -> .
    LPAREN          reduce using rule 107 (while1 -> .)

    while1                         shift and go to state 61

state 46

    (100) if_stmnt -> IF . LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    LPAREN          shift and go to state 62


state 47

    (55) write_stmnt -> WRITE . io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (58) io1 -> .
    LPAREN          reduce using rule 58 (io1 -> .)

    io1                            shift and go to state 63

state 48

    (54) read_stmnt -> READ . io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (58) io1 -> .
    LPAREN          reduce using rule 58 (io1 -> .)

    io1                            shift and go to state 64

state 49

    (53) ret_stmnt -> RETURN . LPAREN logic RPAREN SEMICLN
    LPAREN          shift and go to state 65


state 50

    (48) func_stmnt -> ID . LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> ID . arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> ID . ass1 arr ASS ass2 logic ass3 SEMICLN
    (17) arr -> . empty
    (18) arr -> . LSQUARE exp RSQUARE
    (45) ass1 -> .
    (110) empty -> .
  ! shift/reduce conflict for LSQUARE resolved as shift
  ! reduce/reduce conflict for ASS resolved using rule 45 (ass1 -> .)
    LPAREN          shift and go to state 66
    LSQUARE         shift and go to state 70
    ASS             reduce using rule 45 (ass1 -> .)

    arr                            shift and go to state 67
    ass1                           shift and go to state 68
    empty                          shift and go to state 69

state 51

    (20) funcdecl -> FUNC tipofunc func1 ID func2 . LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    LPAREN          shift and go to state 71


state 52

    (12) multid -> COMMA ID prog5 . arr multid
    (17) arr -> . empty
    (18) arr -> . LSQUARE exp RSQUARE
    (110) empty -> .
    LSQUARE         shift and go to state 70
    COMMA           reduce using rule 110 (empty -> .)
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    SEMICLN         reduce using rule 110 (empty -> .)

    arr                            shift and go to state 72
    empty                          shift and go to state 69

state 53

    (8) multivd -> tipo prog4 COLON ID . prog5 arr multid SEMICLN multivd
    (10) prog5 -> .
    LSQUARE         reduce using rule 10 (prog5 -> .)
    COMMA           reduce using rule 10 (prog5 -> .)
    SEMICLN         reduce using rule 10 (prog5 -> .)

    prog5                          shift and go to state 73

state 54

    (36) stmnt -> while_stmnt stmnt .
    $end            reduce using rule 36 (stmnt -> while_stmnt stmnt .)
    ELSE            reduce using rule 36 (stmnt -> while_stmnt stmnt .)
    END             reduce using rule 36 (stmnt -> while_stmnt stmnt .)
    RCURLY          reduce using rule 36 (stmnt -> while_stmnt stmnt .)


state 55

    (37) stmnt -> if_stmnt stmnt .
    $end            reduce using rule 37 (stmnt -> if_stmnt stmnt .)
    ELSE            reduce using rule 37 (stmnt -> if_stmnt stmnt .)
    END             reduce using rule 37 (stmnt -> if_stmnt stmnt .)
    RCURLY          reduce using rule 37 (stmnt -> if_stmnt stmnt .)


state 56

    (38) stmnt -> write_stmnt stmnt .
    $end            reduce using rule 38 (stmnt -> write_stmnt stmnt .)
    ELSE            reduce using rule 38 (stmnt -> write_stmnt stmnt .)
    END             reduce using rule 38 (stmnt -> write_stmnt stmnt .)
    RCURLY          reduce using rule 38 (stmnt -> write_stmnt stmnt .)


state 57

    (39) stmnt -> read_stmnt stmnt .
    $end            reduce using rule 39 (stmnt -> read_stmnt stmnt .)
    ELSE            reduce using rule 39 (stmnt -> read_stmnt stmnt .)
    END             reduce using rule 39 (stmnt -> read_stmnt stmnt .)
    RCURLY          reduce using rule 39 (stmnt -> read_stmnt stmnt .)


state 58

    (40) stmnt -> ret_stmnt stmnt .
    $end            reduce using rule 40 (stmnt -> ret_stmnt stmnt .)
    ELSE            reduce using rule 40 (stmnt -> ret_stmnt stmnt .)
    END             reduce using rule 40 (stmnt -> ret_stmnt stmnt .)
    RCURLY          reduce using rule 40 (stmnt -> ret_stmnt stmnt .)


state 59

    (41) stmnt -> func_stmnt stmnt .
    $end            reduce using rule 41 (stmnt -> func_stmnt stmnt .)
    ELSE            reduce using rule 41 (stmnt -> func_stmnt stmnt .)
    END             reduce using rule 41 (stmnt -> func_stmnt stmnt .)
    RCURLY          reduce using rule 41 (stmnt -> func_stmnt stmnt .)


state 60

    (42) stmnt -> ass_stmnt stmnt .
    $end            reduce using rule 42 (stmnt -> ass_stmnt stmnt .)
    ELSE            reduce using rule 42 (stmnt -> ass_stmnt stmnt .)
    END             reduce using rule 42 (stmnt -> ass_stmnt stmnt .)
    RCURLY          reduce using rule 42 (stmnt -> ass_stmnt stmnt .)


state 61

    (106) while_stmnt -> WHILE while1 . LPAREN logic while2 RPAREN stmnt while3 END
    LPAREN          shift and go to state 74


state 62

    (100) if_stmnt -> IF LPAREN . logic if1 RPAREN stmnt else_stmnt END if2
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 75
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 63

    (55) write_stmnt -> WRITE io1 . LPAREN logic io2 multio RPAREN io3 SEMICLN
    LPAREN          shift and go to state 86


state 64

    (54) read_stmnt -> READ io1 . LPAREN logic multio io2 RPAREN io3 SEMICLN
    LPAREN          shift and go to state 87


state 65

    (53) ret_stmnt -> RETURN LPAREN . logic RPAREN SEMICLN
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 88
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 66

    (48) func_stmnt -> ID LPAREN . arg RPAREN SEMICLN
    (49) arg -> . empty
    (50) arg -> . logic multiarg
    (110) empty -> .
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    RPAREN          reduce using rule 110 (empty -> .)
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    arg                            shift and go to state 89
    empty                          shift and go to state 90
    logic                          shift and go to state 91
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 67

    (43) ass_stmnt -> ID arr . ASS func_stmnt SEMICLN
    ASS             shift and go to state 92


state 68

    (44) ass_stmnt -> ID ass1 . arr ASS ass2 logic ass3 SEMICLN
    (17) arr -> . empty
    (18) arr -> . LSQUARE exp RSQUARE
    (110) empty -> .
    LSQUARE         shift and go to state 70
    ASS             reduce using rule 110 (empty -> .)

    arr                            shift and go to state 93
    empty                          shift and go to state 69

state 69

    (17) arr -> empty .
    ASS             reduce using rule 17 (arr -> empty .)
    COMMA           reduce using rule 17 (arr -> empty .)
    FUNC            reduce using rule 17 (arr -> empty .)
    MAIN            reduce using rule 17 (arr -> empty .)
    WHILE           reduce using rule 17 (arr -> empty .)
    IF              reduce using rule 17 (arr -> empty .)
    WRITE           reduce using rule 17 (arr -> empty .)
    READ            reduce using rule 17 (arr -> empty .)
    RETURN          reduce using rule 17 (arr -> empty .)
    ID              reduce using rule 17 (arr -> empty .)
    RCURLY          reduce using rule 17 (arr -> empty .)
    SEMICLN         reduce using rule 17 (arr -> empty .)
    DIV             reduce using rule 17 (arr -> empty .)
    MULT            reduce using rule 17 (arr -> empty .)
    SUB             reduce using rule 17 (arr -> empty .)
    SUM             reduce using rule 17 (arr -> empty .)
    EQUAL_TO        reduce using rule 17 (arr -> empty .)
    DIFFERENT_TO    reduce using rule 17 (arr -> empty .)
    LESS_OR_EQ_THAN reduce using rule 17 (arr -> empty .)
    MORE_OR_EQ_THAN reduce using rule 17 (arr -> empty .)
    LESS_THAN       reduce using rule 17 (arr -> empty .)
    MORE_THAN       reduce using rule 17 (arr -> empty .)
    OR              reduce using rule 17 (arr -> empty .)
    AND             reduce using rule 17 (arr -> empty .)
    RPAREN          reduce using rule 17 (arr -> empty .)
    RSQUARE         reduce using rule 17 (arr -> empty .)


state 70

    (18) arr -> LSQUARE . exp RSQUARE
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    exp                            shift and go to state 94
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 71

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN . param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (28) param -> . empty
    (29) param -> . tipo param1 COLON ID param2 multiparam
    (110) empty -> .
    (13) tipo -> . BOOL
    (14) tipo -> . CHAR
    (15) tipo -> . FLOAT
    (16) tipo -> . INT
    RPAREN          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    param                          shift and go to state 95
    empty                          shift and go to state 96
    tipo                           shift and go to state 97

state 72

    (12) multid -> COMMA ID prog5 arr . multid
    (11) multid -> . empty
    (12) multid -> . COMMA ID prog5 arr multid
    (110) empty -> .
    COMMA           shift and go to state 30
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    SEMICLN         reduce using rule 110 (empty -> .)

    multid                         shift and go to state 98
    empty                          shift and go to state 29

state 73

    (8) multivd -> tipo prog4 COLON ID prog5 . arr multid SEMICLN multivd
    (17) arr -> . empty
    (18) arr -> . LSQUARE exp RSQUARE
    (110) empty -> .
    LSQUARE         shift and go to state 70
    COMMA           reduce using rule 110 (empty -> .)
    SEMICLN         reduce using rule 110 (empty -> .)

    arr                            shift and go to state 99
    empty                          shift and go to state 69

state 74

    (106) while_stmnt -> WHILE while1 LPAREN . logic while2 RPAREN stmnt while3 END
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 100
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 75

    (100) if_stmnt -> IF LPAREN logic . if1 RPAREN stmnt else_stmnt END if2
    (101) if1 -> .
    RPAREN          reduce using rule 101 (if1 -> .)

    if1                            shift and go to state 101

state 76

    (61) logic -> rel . log2 OR log1 logic
    (62) logic -> rel . log2 AND log1 logic
    (63) logic -> rel . log2
    (65) log2 -> .
    OR              reduce using rule 65 (log2 -> .)
    AND             reduce using rule 65 (log2 -> .)
    RPAREN          reduce using rule 65 (log2 -> .)
    COMMA           reduce using rule 65 (log2 -> .)
    SEMICLN         reduce using rule 65 (log2 -> .)

    log2                           shift and go to state 102

state 77

    (72) rel -> exp . rel2 relop rel1 rel
    (73) rel -> exp . rel2
    (75) rel2 -> .
    EQUAL_TO        reduce using rule 75 (rel2 -> .)
    DIFFERENT_TO    reduce using rule 75 (rel2 -> .)
    LESS_OR_EQ_THAN reduce using rule 75 (rel2 -> .)
    MORE_OR_EQ_THAN reduce using rule 75 (rel2 -> .)
    LESS_THAN       reduce using rule 75 (rel2 -> .)
    MORE_THAN       reduce using rule 75 (rel2 -> .)
    OR              reduce using rule 75 (rel2 -> .)
    AND             reduce using rule 75 (rel2 -> .)
    RPAREN          reduce using rule 75 (rel2 -> .)
    COMMA           reduce using rule 75 (rel2 -> .)
    SEMICLN         reduce using rule 75 (rel2 -> .)

    rel2                           shift and go to state 103

state 78

    (76) exp -> term . exp2 SUB exp1 exp
    (77) exp -> term . exp2 SUM exp1 exp
    (78) exp -> term . exp2
    (79) exp2 -> .
    SUB             reduce using rule 79 (exp2 -> .)
    SUM             reduce using rule 79 (exp2 -> .)
    EQUAL_TO        reduce using rule 79 (exp2 -> .)
    DIFFERENT_TO    reduce using rule 79 (exp2 -> .)
    LESS_OR_EQ_THAN reduce using rule 79 (exp2 -> .)
    MORE_OR_EQ_THAN reduce using rule 79 (exp2 -> .)
    LESS_THAN       reduce using rule 79 (exp2 -> .)
    MORE_THAN       reduce using rule 79 (exp2 -> .)
    OR              reduce using rule 79 (exp2 -> .)
    AND             reduce using rule 79 (exp2 -> .)
    RPAREN          reduce using rule 79 (exp2 -> .)
    COMMA           reduce using rule 79 (exp2 -> .)
    RSQUARE         reduce using rule 79 (exp2 -> .)
    SEMICLN         reduce using rule 79 (exp2 -> .)

    exp2                           shift and go to state 104

state 79

    (81) term -> factor . term2 DIV term1 term
    (82) term -> factor . term2 MULT term1 term
    (83) term -> factor . term2
    (85) term2 -> .
    DIV             reduce using rule 85 (term2 -> .)
    MULT            reduce using rule 85 (term2 -> .)
    SUB             reduce using rule 85 (term2 -> .)
    SUM             reduce using rule 85 (term2 -> .)
    EQUAL_TO        reduce using rule 85 (term2 -> .)
    DIFFERENT_TO    reduce using rule 85 (term2 -> .)
    LESS_OR_EQ_THAN reduce using rule 85 (term2 -> .)
    MORE_OR_EQ_THAN reduce using rule 85 (term2 -> .)
    LESS_THAN       reduce using rule 85 (term2 -> .)
    MORE_THAN       reduce using rule 85 (term2 -> .)
    OR              reduce using rule 85 (term2 -> .)
    AND             reduce using rule 85 (term2 -> .)
    RPAREN          reduce using rule 85 (term2 -> .)
    COMMA           reduce using rule 85 (term2 -> .)
    RSQUARE         reduce using rule 85 (term2 -> .)
    SEMICLN         reduce using rule 85 (term2 -> .)

    term2                          shift and go to state 105

state 80

    (86) factor -> FALSE . ctes4
    (96) ctes4 -> .
    DIV             reduce using rule 96 (ctes4 -> .)
    MULT            reduce using rule 96 (ctes4 -> .)
    SUB             reduce using rule 96 (ctes4 -> .)
    SUM             reduce using rule 96 (ctes4 -> .)
    EQUAL_TO        reduce using rule 96 (ctes4 -> .)
    DIFFERENT_TO    reduce using rule 96 (ctes4 -> .)
    LESS_OR_EQ_THAN reduce using rule 96 (ctes4 -> .)
    MORE_OR_EQ_THAN reduce using rule 96 (ctes4 -> .)
    LESS_THAN       reduce using rule 96 (ctes4 -> .)
    MORE_THAN       reduce using rule 96 (ctes4 -> .)
    OR              reduce using rule 96 (ctes4 -> .)
    AND             reduce using rule 96 (ctes4 -> .)
    RPAREN          reduce using rule 96 (ctes4 -> .)
    COMMA           reduce using rule 96 (ctes4 -> .)
    RSQUARE         reduce using rule 96 (ctes4 -> .)
    SEMICLN         reduce using rule 96 (ctes4 -> .)

    ctes4                          shift and go to state 106

state 81

    (87) factor -> TRUE . ctes4
    (96) ctes4 -> .
    DIV             reduce using rule 96 (ctes4 -> .)
    MULT            reduce using rule 96 (ctes4 -> .)
    SUB             reduce using rule 96 (ctes4 -> .)
    SUM             reduce using rule 96 (ctes4 -> .)
    EQUAL_TO        reduce using rule 96 (ctes4 -> .)
    DIFFERENT_TO    reduce using rule 96 (ctes4 -> .)
    LESS_OR_EQ_THAN reduce using rule 96 (ctes4 -> .)
    MORE_OR_EQ_THAN reduce using rule 96 (ctes4 -> .)
    LESS_THAN       reduce using rule 96 (ctes4 -> .)
    MORE_THAN       reduce using rule 96 (ctes4 -> .)
    OR              reduce using rule 96 (ctes4 -> .)
    AND             reduce using rule 96 (ctes4 -> .)
    RPAREN          reduce using rule 96 (ctes4 -> .)
    COMMA           reduce using rule 96 (ctes4 -> .)
    RSQUARE         reduce using rule 96 (ctes4 -> .)
    SEMICLN         reduce using rule 96 (ctes4 -> .)

    ctes4                          shift and go to state 107

state 82

    (88) factor -> CTE_STR . ctes3
    (95) ctes3 -> .
    DIV             reduce using rule 95 (ctes3 -> .)
    MULT            reduce using rule 95 (ctes3 -> .)
    SUB             reduce using rule 95 (ctes3 -> .)
    SUM             reduce using rule 95 (ctes3 -> .)
    EQUAL_TO        reduce using rule 95 (ctes3 -> .)
    DIFFERENT_TO    reduce using rule 95 (ctes3 -> .)
    LESS_OR_EQ_THAN reduce using rule 95 (ctes3 -> .)
    MORE_OR_EQ_THAN reduce using rule 95 (ctes3 -> .)
    LESS_THAN       reduce using rule 95 (ctes3 -> .)
    MORE_THAN       reduce using rule 95 (ctes3 -> .)
    OR              reduce using rule 95 (ctes3 -> .)
    AND             reduce using rule 95 (ctes3 -> .)
    RPAREN          reduce using rule 95 (ctes3 -> .)
    COMMA           reduce using rule 95 (ctes3 -> .)
    RSQUARE         reduce using rule 95 (ctes3 -> .)
    SEMICLN         reduce using rule 95 (ctes3 -> .)

    ctes3                          shift and go to state 108

state 83

    (89) factor -> CTE_FLT . ctes2
    (94) ctes2 -> .
    DIV             reduce using rule 94 (ctes2 -> .)
    MULT            reduce using rule 94 (ctes2 -> .)
    SUB             reduce using rule 94 (ctes2 -> .)
    SUM             reduce using rule 94 (ctes2 -> .)
    EQUAL_TO        reduce using rule 94 (ctes2 -> .)
    DIFFERENT_TO    reduce using rule 94 (ctes2 -> .)
    LESS_OR_EQ_THAN reduce using rule 94 (ctes2 -> .)
    MORE_OR_EQ_THAN reduce using rule 94 (ctes2 -> .)
    LESS_THAN       reduce using rule 94 (ctes2 -> .)
    MORE_THAN       reduce using rule 94 (ctes2 -> .)
    OR              reduce using rule 94 (ctes2 -> .)
    AND             reduce using rule 94 (ctes2 -> .)
    RPAREN          reduce using rule 94 (ctes2 -> .)
    COMMA           reduce using rule 94 (ctes2 -> .)
    RSQUARE         reduce using rule 94 (ctes2 -> .)
    SEMICLN         reduce using rule 94 (ctes2 -> .)

    ctes2                          shift and go to state 109

state 84

    (90) factor -> CTE_NUM . ctes1
    (93) ctes1 -> .
    DIV             reduce using rule 93 (ctes1 -> .)
    MULT            reduce using rule 93 (ctes1 -> .)
    SUB             reduce using rule 93 (ctes1 -> .)
    SUM             reduce using rule 93 (ctes1 -> .)
    EQUAL_TO        reduce using rule 93 (ctes1 -> .)
    DIFFERENT_TO    reduce using rule 93 (ctes1 -> .)
    LESS_OR_EQ_THAN reduce using rule 93 (ctes1 -> .)
    MORE_OR_EQ_THAN reduce using rule 93 (ctes1 -> .)
    LESS_THAN       reduce using rule 93 (ctes1 -> .)
    MORE_THAN       reduce using rule 93 (ctes1 -> .)
    OR              reduce using rule 93 (ctes1 -> .)
    AND             reduce using rule 93 (ctes1 -> .)
    RPAREN          reduce using rule 93 (ctes1 -> .)
    COMMA           reduce using rule 93 (ctes1 -> .)
    RSQUARE         reduce using rule 93 (ctes1 -> .)
    SEMICLN         reduce using rule 93 (ctes1 -> .)

    ctes1                          shift and go to state 110

state 85

    (91) factor -> ID . fact1 LPAREN logic multiexp RPAREN
    (92) factor -> ID . fact1 arr
    (97) fact1 -> .
    LPAREN          reduce using rule 97 (fact1 -> .)
    LSQUARE         reduce using rule 97 (fact1 -> .)
    DIV             reduce using rule 97 (fact1 -> .)
    MULT            reduce using rule 97 (fact1 -> .)
    SUB             reduce using rule 97 (fact1 -> .)
    SUM             reduce using rule 97 (fact1 -> .)
    EQUAL_TO        reduce using rule 97 (fact1 -> .)
    DIFFERENT_TO    reduce using rule 97 (fact1 -> .)
    LESS_OR_EQ_THAN reduce using rule 97 (fact1 -> .)
    MORE_OR_EQ_THAN reduce using rule 97 (fact1 -> .)
    LESS_THAN       reduce using rule 97 (fact1 -> .)
    MORE_THAN       reduce using rule 97 (fact1 -> .)
    OR              reduce using rule 97 (fact1 -> .)
    AND             reduce using rule 97 (fact1 -> .)
    RPAREN          reduce using rule 97 (fact1 -> .)
    COMMA           reduce using rule 97 (fact1 -> .)
    RSQUARE         reduce using rule 97 (fact1 -> .)
    SEMICLN         reduce using rule 97 (fact1 -> .)

    fact1                          shift and go to state 111

state 86

    (55) write_stmnt -> WRITE io1 LPAREN . logic io2 multio RPAREN io3 SEMICLN
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 112
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 87

    (54) read_stmnt -> READ io1 LPAREN . logic multio io2 RPAREN io3 SEMICLN
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 113
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 88

    (53) ret_stmnt -> RETURN LPAREN logic . RPAREN SEMICLN
    RPAREN          shift and go to state 114


state 89

    (48) func_stmnt -> ID LPAREN arg . RPAREN SEMICLN
    RPAREN          shift and go to state 115


state 90

    (49) arg -> empty .
    RPAREN          reduce using rule 49 (arg -> empty .)
    COMMA           reduce using rule 49 (arg -> empty .)


state 91

    (50) arg -> logic . multiarg
    (51) multiarg -> . empty
    (52) multiarg -> . COMMA arg multiarg
    (110) empty -> .
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 118
    RPAREN          reduce using rule 110 (empty -> .)

    multiarg                       shift and go to state 116
    empty                          shift and go to state 117

state 92

    (43) ass_stmnt -> ID arr ASS . func_stmnt SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    ID              shift and go to state 119

    func_stmnt                     shift and go to state 120

state 93

    (44) ass_stmnt -> ID ass1 arr . ASS ass2 logic ass3 SEMICLN
    ASS             shift and go to state 121


state 94

    (18) arr -> LSQUARE exp . RSQUARE
    RSQUARE         shift and go to state 122


state 95

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param . RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    RPAREN          shift and go to state 123


state 96

    (28) param -> empty .
    RPAREN          reduce using rule 28 (param -> empty .)


state 97

    (29) param -> tipo . param1 COLON ID param2 multiparam
    (30) param1 -> .
    COLON           reduce using rule 30 (param1 -> .)

    param1                         shift and go to state 124

state 98

    (12) multid -> COMMA ID prog5 arr multid .
    FUNC            reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    MAIN            reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    WHILE           reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    IF              reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    WRITE           reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    READ            reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    RETURN          reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    ID              reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    RCURLY          reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)
    SEMICLN         reduce using rule 12 (multid -> COMMA ID prog5 arr multid .)


state 99

    (8) multivd -> tipo prog4 COLON ID prog5 arr . multid SEMICLN multivd
    (11) multid -> . empty
    (12) multid -> . COMMA ID prog5 arr multid
    (110) empty -> .
    COMMA           shift and go to state 30
    SEMICLN         reduce using rule 110 (empty -> .)

    multid                         shift and go to state 125
    empty                          shift and go to state 29

state 100

    (106) while_stmnt -> WHILE while1 LPAREN logic . while2 RPAREN stmnt while3 END
    (108) while2 -> .
    RPAREN          reduce using rule 108 (while2 -> .)

    while2                         shift and go to state 126

state 101

    (100) if_stmnt -> IF LPAREN logic if1 . RPAREN stmnt else_stmnt END if2
    RPAREN          shift and go to state 127


state 102

    (61) logic -> rel log2 . OR log1 logic
    (62) logic -> rel log2 . AND log1 logic
    (63) logic -> rel log2 .
    OR              shift and go to state 128
    AND             shift and go to state 129
    RPAREN          reduce using rule 63 (logic -> rel log2 .)
    COMMA           reduce using rule 63 (logic -> rel log2 .)
    SEMICLN         reduce using rule 63 (logic -> rel log2 .)


state 103

    (72) rel -> exp rel2 . relop rel1 rel
    (73) rel -> exp rel2 .
    (66) relop -> . EQUAL_TO
    (67) relop -> . DIFFERENT_TO
    (68) relop -> . LESS_OR_EQ_THAN
    (69) relop -> . MORE_OR_EQ_THAN
    (70) relop -> . LESS_THAN
    (71) relop -> . MORE_THAN
    OR              reduce using rule 73 (rel -> exp rel2 .)
    AND             reduce using rule 73 (rel -> exp rel2 .)
    RPAREN          reduce using rule 73 (rel -> exp rel2 .)
    COMMA           reduce using rule 73 (rel -> exp rel2 .)
    SEMICLN         reduce using rule 73 (rel -> exp rel2 .)
    EQUAL_TO        shift and go to state 131
    DIFFERENT_TO    shift and go to state 132
    LESS_OR_EQ_THAN shift and go to state 133
    MORE_OR_EQ_THAN shift and go to state 134
    LESS_THAN       shift and go to state 135
    MORE_THAN       shift and go to state 136

    relop                          shift and go to state 130

state 104

    (76) exp -> term exp2 . SUB exp1 exp
    (77) exp -> term exp2 . SUM exp1 exp
    (78) exp -> term exp2 .
    SUB             shift and go to state 137
    SUM             shift and go to state 138
    EQUAL_TO        reduce using rule 78 (exp -> term exp2 .)
    DIFFERENT_TO    reduce using rule 78 (exp -> term exp2 .)
    LESS_OR_EQ_THAN reduce using rule 78 (exp -> term exp2 .)
    MORE_OR_EQ_THAN reduce using rule 78 (exp -> term exp2 .)
    LESS_THAN       reduce using rule 78 (exp -> term exp2 .)
    MORE_THAN       reduce using rule 78 (exp -> term exp2 .)
    OR              reduce using rule 78 (exp -> term exp2 .)
    AND             reduce using rule 78 (exp -> term exp2 .)
    RPAREN          reduce using rule 78 (exp -> term exp2 .)
    COMMA           reduce using rule 78 (exp -> term exp2 .)
    RSQUARE         reduce using rule 78 (exp -> term exp2 .)
    SEMICLN         reduce using rule 78 (exp -> term exp2 .)


state 105

    (81) term -> factor term2 . DIV term1 term
    (82) term -> factor term2 . MULT term1 term
    (83) term -> factor term2 .
    DIV             shift and go to state 139
    MULT            shift and go to state 140
    SUB             reduce using rule 83 (term -> factor term2 .)
    SUM             reduce using rule 83 (term -> factor term2 .)
    EQUAL_TO        reduce using rule 83 (term -> factor term2 .)
    DIFFERENT_TO    reduce using rule 83 (term -> factor term2 .)
    LESS_OR_EQ_THAN reduce using rule 83 (term -> factor term2 .)
    MORE_OR_EQ_THAN reduce using rule 83 (term -> factor term2 .)
    LESS_THAN       reduce using rule 83 (term -> factor term2 .)
    MORE_THAN       reduce using rule 83 (term -> factor term2 .)
    OR              reduce using rule 83 (term -> factor term2 .)
    AND             reduce using rule 83 (term -> factor term2 .)
    RPAREN          reduce using rule 83 (term -> factor term2 .)
    COMMA           reduce using rule 83 (term -> factor term2 .)
    RSQUARE         reduce using rule 83 (term -> factor term2 .)
    SEMICLN         reduce using rule 83 (term -> factor term2 .)


state 106

    (86) factor -> FALSE ctes4 .
    DIV             reduce using rule 86 (factor -> FALSE ctes4 .)
    MULT            reduce using rule 86 (factor -> FALSE ctes4 .)
    SUB             reduce using rule 86 (factor -> FALSE ctes4 .)
    SUM             reduce using rule 86 (factor -> FALSE ctes4 .)
    EQUAL_TO        reduce using rule 86 (factor -> FALSE ctes4 .)
    DIFFERENT_TO    reduce using rule 86 (factor -> FALSE ctes4 .)
    LESS_OR_EQ_THAN reduce using rule 86 (factor -> FALSE ctes4 .)
    MORE_OR_EQ_THAN reduce using rule 86 (factor -> FALSE ctes4 .)
    LESS_THAN       reduce using rule 86 (factor -> FALSE ctes4 .)
    MORE_THAN       reduce using rule 86 (factor -> FALSE ctes4 .)
    OR              reduce using rule 86 (factor -> FALSE ctes4 .)
    AND             reduce using rule 86 (factor -> FALSE ctes4 .)
    RPAREN          reduce using rule 86 (factor -> FALSE ctes4 .)
    COMMA           reduce using rule 86 (factor -> FALSE ctes4 .)
    RSQUARE         reduce using rule 86 (factor -> FALSE ctes4 .)
    SEMICLN         reduce using rule 86 (factor -> FALSE ctes4 .)


state 107

    (87) factor -> TRUE ctes4 .
    DIV             reduce using rule 87 (factor -> TRUE ctes4 .)
    MULT            reduce using rule 87 (factor -> TRUE ctes4 .)
    SUB             reduce using rule 87 (factor -> TRUE ctes4 .)
    SUM             reduce using rule 87 (factor -> TRUE ctes4 .)
    EQUAL_TO        reduce using rule 87 (factor -> TRUE ctes4 .)
    DIFFERENT_TO    reduce using rule 87 (factor -> TRUE ctes4 .)
    LESS_OR_EQ_THAN reduce using rule 87 (factor -> TRUE ctes4 .)
    MORE_OR_EQ_THAN reduce using rule 87 (factor -> TRUE ctes4 .)
    LESS_THAN       reduce using rule 87 (factor -> TRUE ctes4 .)
    MORE_THAN       reduce using rule 87 (factor -> TRUE ctes4 .)
    OR              reduce using rule 87 (factor -> TRUE ctes4 .)
    AND             reduce using rule 87 (factor -> TRUE ctes4 .)
    RPAREN          reduce using rule 87 (factor -> TRUE ctes4 .)
    COMMA           reduce using rule 87 (factor -> TRUE ctes4 .)
    RSQUARE         reduce using rule 87 (factor -> TRUE ctes4 .)
    SEMICLN         reduce using rule 87 (factor -> TRUE ctes4 .)


state 108

    (88) factor -> CTE_STR ctes3 .
    DIV             reduce using rule 88 (factor -> CTE_STR ctes3 .)
    MULT            reduce using rule 88 (factor -> CTE_STR ctes3 .)
    SUB             reduce using rule 88 (factor -> CTE_STR ctes3 .)
    SUM             reduce using rule 88 (factor -> CTE_STR ctes3 .)
    EQUAL_TO        reduce using rule 88 (factor -> CTE_STR ctes3 .)
    DIFFERENT_TO    reduce using rule 88 (factor -> CTE_STR ctes3 .)
    LESS_OR_EQ_THAN reduce using rule 88 (factor -> CTE_STR ctes3 .)
    MORE_OR_EQ_THAN reduce using rule 88 (factor -> CTE_STR ctes3 .)
    LESS_THAN       reduce using rule 88 (factor -> CTE_STR ctes3 .)
    MORE_THAN       reduce using rule 88 (factor -> CTE_STR ctes3 .)
    OR              reduce using rule 88 (factor -> CTE_STR ctes3 .)
    AND             reduce using rule 88 (factor -> CTE_STR ctes3 .)
    RPAREN          reduce using rule 88 (factor -> CTE_STR ctes3 .)
    COMMA           reduce using rule 88 (factor -> CTE_STR ctes3 .)
    RSQUARE         reduce using rule 88 (factor -> CTE_STR ctes3 .)
    SEMICLN         reduce using rule 88 (factor -> CTE_STR ctes3 .)


state 109

    (89) factor -> CTE_FLT ctes2 .
    DIV             reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    MULT            reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    SUB             reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    SUM             reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    EQUAL_TO        reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    DIFFERENT_TO    reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    LESS_OR_EQ_THAN reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    MORE_OR_EQ_THAN reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    LESS_THAN       reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    MORE_THAN       reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    OR              reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    AND             reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    RPAREN          reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    COMMA           reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    RSQUARE         reduce using rule 89 (factor -> CTE_FLT ctes2 .)
    SEMICLN         reduce using rule 89 (factor -> CTE_FLT ctes2 .)


state 110

    (90) factor -> CTE_NUM ctes1 .
    DIV             reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    MULT            reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    SUB             reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    SUM             reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    EQUAL_TO        reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    DIFFERENT_TO    reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    LESS_OR_EQ_THAN reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    MORE_OR_EQ_THAN reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    LESS_THAN       reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    MORE_THAN       reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    OR              reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    AND             reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    RPAREN          reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    COMMA           reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    RSQUARE         reduce using rule 90 (factor -> CTE_NUM ctes1 .)
    SEMICLN         reduce using rule 90 (factor -> CTE_NUM ctes1 .)


state 111

    (91) factor -> ID fact1 . LPAREN logic multiexp RPAREN
    (92) factor -> ID fact1 . arr
    (17) arr -> . empty
    (18) arr -> . LSQUARE exp RSQUARE
    (110) empty -> .
    LPAREN          shift and go to state 141
    LSQUARE         shift and go to state 70
    DIV             reduce using rule 110 (empty -> .)
    MULT            reduce using rule 110 (empty -> .)
    SUB             reduce using rule 110 (empty -> .)
    SUM             reduce using rule 110 (empty -> .)
    EQUAL_TO        reduce using rule 110 (empty -> .)
    DIFFERENT_TO    reduce using rule 110 (empty -> .)
    LESS_OR_EQ_THAN reduce using rule 110 (empty -> .)
    MORE_OR_EQ_THAN reduce using rule 110 (empty -> .)
    LESS_THAN       reduce using rule 110 (empty -> .)
    MORE_THAN       reduce using rule 110 (empty -> .)
    OR              reduce using rule 110 (empty -> .)
    AND             reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    COMMA           reduce using rule 110 (empty -> .)
    RSQUARE         reduce using rule 110 (empty -> .)
    SEMICLN         reduce using rule 110 (empty -> .)

    arr                            shift and go to state 142
    empty                          shift and go to state 69

state 112

    (55) write_stmnt -> WRITE io1 LPAREN logic . io2 multio RPAREN io3 SEMICLN
    (59) io2 -> .
    COMMA           reduce using rule 59 (io2 -> .)
    RPAREN          reduce using rule 59 (io2 -> .)

    io2                            shift and go to state 143

state 113

    (54) read_stmnt -> READ io1 LPAREN logic . multio io2 RPAREN io3 SEMICLN
    (56) multio -> .
    (57) multio -> . COMMA logic io2 multio
    RPAREN          reduce using rule 56 (multio -> .)
    COMMA           shift and go to state 145

    multio                         shift and go to state 144

state 114

    (53) ret_stmnt -> RETURN LPAREN logic RPAREN . SEMICLN
    SEMICLN         shift and go to state 146


state 115

    (48) func_stmnt -> ID LPAREN arg RPAREN . SEMICLN
    SEMICLN         shift and go to state 147


state 116

    (50) arg -> logic multiarg .
    RPAREN          reduce using rule 50 (arg -> logic multiarg .)
    COMMA           reduce using rule 50 (arg -> logic multiarg .)


state 117

    (51) multiarg -> empty .
    COMMA           reduce using rule 51 (multiarg -> empty .)
    RPAREN          reduce using rule 51 (multiarg -> empty .)


state 118

    (52) multiarg -> COMMA . arg multiarg
    (49) arg -> . empty
    (50) arg -> . logic multiarg
    (110) empty -> .
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    COMMA           reduce using rule 110 (empty -> .)
    RPAREN          reduce using rule 110 (empty -> .)
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    arg                            shift and go to state 148
    empty                          shift and go to state 90
    logic                          shift and go to state 91
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 119

    (48) func_stmnt -> ID . LPAREN arg RPAREN SEMICLN
    LPAREN          shift and go to state 66


state 120

    (43) ass_stmnt -> ID arr ASS func_stmnt . SEMICLN
    SEMICLN         shift and go to state 149


state 121

    (44) ass_stmnt -> ID ass1 arr ASS . ass2 logic ass3 SEMICLN
    (46) ass2 -> .
    FALSE           reduce using rule 46 (ass2 -> .)
    TRUE            reduce using rule 46 (ass2 -> .)
    CTE_STR         reduce using rule 46 (ass2 -> .)
    CTE_FLT         reduce using rule 46 (ass2 -> .)
    CTE_NUM         reduce using rule 46 (ass2 -> .)
    ID              reduce using rule 46 (ass2 -> .)

    ass2                           shift and go to state 150

state 122

    (18) arr -> LSQUARE exp RSQUARE .
    ASS             reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    COMMA           reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    FUNC            reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    MAIN            reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    WHILE           reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    IF              reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    WRITE           reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    READ            reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    RETURN          reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    ID              reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    RCURLY          reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    SEMICLN         reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    DIV             reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    MULT            reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    SUB             reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    SUM             reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    EQUAL_TO        reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    DIFFERENT_TO    reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    LESS_OR_EQ_THAN reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    MORE_OR_EQ_THAN reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    LESS_THAN       reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    MORE_THAN       reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    OR              reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    AND             reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    RPAREN          reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)
    RSQUARE         reduce using rule 18 (arr -> LSQUARE exp RSQUARE .)


state 123

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN . func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (23) func3 -> .
    LCURLY          reduce using rule 23 (func3 -> .)

    func3                          shift and go to state 151

state 124

    (29) param -> tipo param1 . COLON ID param2 multiparam
    COLON           shift and go to state 152


state 125

    (8) multivd -> tipo prog4 COLON ID prog5 arr multid . SEMICLN multivd
    SEMICLN         shift and go to state 153


state 126

    (106) while_stmnt -> WHILE while1 LPAREN logic while2 . RPAREN stmnt while3 END
    RPAREN          shift and go to state 154


state 127

    (100) if_stmnt -> IF LPAREN logic if1 RPAREN . stmnt else_stmnt END if2
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    ELSE            reduce using rule 110 (empty -> .)
    END             reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    stmnt                          shift and go to state 155
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 128

    (61) logic -> rel log2 OR . log1 logic
    (64) log1 -> .
    FALSE           reduce using rule 64 (log1 -> .)
    TRUE            reduce using rule 64 (log1 -> .)
    CTE_STR         reduce using rule 64 (log1 -> .)
    CTE_FLT         reduce using rule 64 (log1 -> .)
    CTE_NUM         reduce using rule 64 (log1 -> .)
    ID              reduce using rule 64 (log1 -> .)

    log1                           shift and go to state 156

state 129

    (62) logic -> rel log2 AND . log1 logic
    (64) log1 -> .
    FALSE           reduce using rule 64 (log1 -> .)
    TRUE            reduce using rule 64 (log1 -> .)
    CTE_STR         reduce using rule 64 (log1 -> .)
    CTE_FLT         reduce using rule 64 (log1 -> .)
    CTE_NUM         reduce using rule 64 (log1 -> .)
    ID              reduce using rule 64 (log1 -> .)

    log1                           shift and go to state 157

state 130

    (72) rel -> exp rel2 relop . rel1 rel
    (74) rel1 -> .
    FALSE           reduce using rule 74 (rel1 -> .)
    TRUE            reduce using rule 74 (rel1 -> .)
    CTE_STR         reduce using rule 74 (rel1 -> .)
    CTE_FLT         reduce using rule 74 (rel1 -> .)
    CTE_NUM         reduce using rule 74 (rel1 -> .)
    ID              reduce using rule 74 (rel1 -> .)

    rel1                           shift and go to state 158

state 131

    (66) relop -> EQUAL_TO .
    FALSE           reduce using rule 66 (relop -> EQUAL_TO .)
    TRUE            reduce using rule 66 (relop -> EQUAL_TO .)
    CTE_STR         reduce using rule 66 (relop -> EQUAL_TO .)
    CTE_FLT         reduce using rule 66 (relop -> EQUAL_TO .)
    CTE_NUM         reduce using rule 66 (relop -> EQUAL_TO .)
    ID              reduce using rule 66 (relop -> EQUAL_TO .)


state 132

    (67) relop -> DIFFERENT_TO .
    FALSE           reduce using rule 67 (relop -> DIFFERENT_TO .)
    TRUE            reduce using rule 67 (relop -> DIFFERENT_TO .)
    CTE_STR         reduce using rule 67 (relop -> DIFFERENT_TO .)
    CTE_FLT         reduce using rule 67 (relop -> DIFFERENT_TO .)
    CTE_NUM         reduce using rule 67 (relop -> DIFFERENT_TO .)
    ID              reduce using rule 67 (relop -> DIFFERENT_TO .)


state 133

    (68) relop -> LESS_OR_EQ_THAN .
    FALSE           reduce using rule 68 (relop -> LESS_OR_EQ_THAN .)
    TRUE            reduce using rule 68 (relop -> LESS_OR_EQ_THAN .)
    CTE_STR         reduce using rule 68 (relop -> LESS_OR_EQ_THAN .)
    CTE_FLT         reduce using rule 68 (relop -> LESS_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 68 (relop -> LESS_OR_EQ_THAN .)
    ID              reduce using rule 68 (relop -> LESS_OR_EQ_THAN .)


state 134

    (69) relop -> MORE_OR_EQ_THAN .
    FALSE           reduce using rule 69 (relop -> MORE_OR_EQ_THAN .)
    TRUE            reduce using rule 69 (relop -> MORE_OR_EQ_THAN .)
    CTE_STR         reduce using rule 69 (relop -> MORE_OR_EQ_THAN .)
    CTE_FLT         reduce using rule 69 (relop -> MORE_OR_EQ_THAN .)
    CTE_NUM         reduce using rule 69 (relop -> MORE_OR_EQ_THAN .)
    ID              reduce using rule 69 (relop -> MORE_OR_EQ_THAN .)


state 135

    (70) relop -> LESS_THAN .
    FALSE           reduce using rule 70 (relop -> LESS_THAN .)
    TRUE            reduce using rule 70 (relop -> LESS_THAN .)
    CTE_STR         reduce using rule 70 (relop -> LESS_THAN .)
    CTE_FLT         reduce using rule 70 (relop -> LESS_THAN .)
    CTE_NUM         reduce using rule 70 (relop -> LESS_THAN .)
    ID              reduce using rule 70 (relop -> LESS_THAN .)


state 136

    (71) relop -> MORE_THAN .
    FALSE           reduce using rule 71 (relop -> MORE_THAN .)
    TRUE            reduce using rule 71 (relop -> MORE_THAN .)
    CTE_STR         reduce using rule 71 (relop -> MORE_THAN .)
    CTE_FLT         reduce using rule 71 (relop -> MORE_THAN .)
    CTE_NUM         reduce using rule 71 (relop -> MORE_THAN .)
    ID              reduce using rule 71 (relop -> MORE_THAN .)


state 137

    (76) exp -> term exp2 SUB . exp1 exp
    (80) exp1 -> .
    FALSE           reduce using rule 80 (exp1 -> .)
    TRUE            reduce using rule 80 (exp1 -> .)
    CTE_STR         reduce using rule 80 (exp1 -> .)
    CTE_FLT         reduce using rule 80 (exp1 -> .)
    CTE_NUM         reduce using rule 80 (exp1 -> .)
    ID              reduce using rule 80 (exp1 -> .)

    exp1                           shift and go to state 159

state 138

    (77) exp -> term exp2 SUM . exp1 exp
    (80) exp1 -> .
    FALSE           reduce using rule 80 (exp1 -> .)
    TRUE            reduce using rule 80 (exp1 -> .)
    CTE_STR         reduce using rule 80 (exp1 -> .)
    CTE_FLT         reduce using rule 80 (exp1 -> .)
    CTE_NUM         reduce using rule 80 (exp1 -> .)
    ID              reduce using rule 80 (exp1 -> .)

    exp1                           shift and go to state 160

state 139

    (81) term -> factor term2 DIV . term1 term
    (84) term1 -> .
    FALSE           reduce using rule 84 (term1 -> .)
    TRUE            reduce using rule 84 (term1 -> .)
    CTE_STR         reduce using rule 84 (term1 -> .)
    CTE_FLT         reduce using rule 84 (term1 -> .)
    CTE_NUM         reduce using rule 84 (term1 -> .)
    ID              reduce using rule 84 (term1 -> .)

    term1                          shift and go to state 161

state 140

    (82) term -> factor term2 MULT . term1 term
    (84) term1 -> .
    FALSE           reduce using rule 84 (term1 -> .)
    TRUE            reduce using rule 84 (term1 -> .)
    CTE_STR         reduce using rule 84 (term1 -> .)
    CTE_FLT         reduce using rule 84 (term1 -> .)
    CTE_NUM         reduce using rule 84 (term1 -> .)
    ID              reduce using rule 84 (term1 -> .)

    term1                          shift and go to state 162

state 141

    (91) factor -> ID fact1 LPAREN . logic multiexp RPAREN
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 163
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 142

    (92) factor -> ID fact1 arr .
    DIV             reduce using rule 92 (factor -> ID fact1 arr .)
    MULT            reduce using rule 92 (factor -> ID fact1 arr .)
    SUB             reduce using rule 92 (factor -> ID fact1 arr .)
    SUM             reduce using rule 92 (factor -> ID fact1 arr .)
    EQUAL_TO        reduce using rule 92 (factor -> ID fact1 arr .)
    DIFFERENT_TO    reduce using rule 92 (factor -> ID fact1 arr .)
    LESS_OR_EQ_THAN reduce using rule 92 (factor -> ID fact1 arr .)
    MORE_OR_EQ_THAN reduce using rule 92 (factor -> ID fact1 arr .)
    LESS_THAN       reduce using rule 92 (factor -> ID fact1 arr .)
    MORE_THAN       reduce using rule 92 (factor -> ID fact1 arr .)
    OR              reduce using rule 92 (factor -> ID fact1 arr .)
    AND             reduce using rule 92 (factor -> ID fact1 arr .)
    RPAREN          reduce using rule 92 (factor -> ID fact1 arr .)
    COMMA           reduce using rule 92 (factor -> ID fact1 arr .)
    RSQUARE         reduce using rule 92 (factor -> ID fact1 arr .)
    SEMICLN         reduce using rule 92 (factor -> ID fact1 arr .)


state 143

    (55) write_stmnt -> WRITE io1 LPAREN logic io2 . multio RPAREN io3 SEMICLN
    (56) multio -> .
    (57) multio -> . COMMA logic io2 multio
    RPAREN          reduce using rule 56 (multio -> .)
    COMMA           shift and go to state 145

    multio                         shift and go to state 164

state 144

    (54) read_stmnt -> READ io1 LPAREN logic multio . io2 RPAREN io3 SEMICLN
    (59) io2 -> .
    RPAREN          reduce using rule 59 (io2 -> .)

    io2                            shift and go to state 165

state 145

    (57) multio -> COMMA . logic io2 multio
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 166
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 146

    (53) ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .
    WHILE           reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    IF              reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    WRITE           reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    READ            reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    RETURN          reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    ID              reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    $end            reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    ELSE            reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    END             reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)
    RCURLY          reduce using rule 53 (ret_stmnt -> RETURN LPAREN logic RPAREN SEMICLN .)


state 147

    (48) func_stmnt -> ID LPAREN arg RPAREN SEMICLN .
    WHILE           reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    IF              reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    WRITE           reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    READ            reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    RETURN          reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    ID              reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    $end            reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    ELSE            reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    END             reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    RCURLY          reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)
    SEMICLN         reduce using rule 48 (func_stmnt -> ID LPAREN arg RPAREN SEMICLN .)


state 148

    (52) multiarg -> COMMA arg . multiarg
    (51) multiarg -> . empty
    (52) multiarg -> . COMMA arg multiarg
    (110) empty -> .
  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 118
    RPAREN          reduce using rule 110 (empty -> .)

    multiarg                       shift and go to state 167
    empty                          shift and go to state 117

state 149

    (43) ass_stmnt -> ID arr ASS func_stmnt SEMICLN .
    WHILE           reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    IF              reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    WRITE           reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    READ            reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    RETURN          reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    ID              reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    $end            reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    ELSE            reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    END             reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)
    RCURLY          reduce using rule 43 (ass_stmnt -> ID arr ASS func_stmnt SEMICLN .)


state 150

    (44) ass_stmnt -> ID ass1 arr ASS ass2 . logic ass3 SEMICLN
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 168
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 151

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 . LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    LCURLY          shift and go to state 169


state 152

    (29) param -> tipo param1 COLON . ID param2 multiparam
    ID              shift and go to state 170


state 153

    (8) multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN . multivd
    (7) multivd -> . empty
    (8) multivd -> . tipo prog4 COLON ID prog5 arr multid SEMICLN multivd
    (110) empty -> .
    (13) tipo -> . BOOL
    (14) tipo -> . CHAR
    (15) tipo -> . FLOAT
    (16) tipo -> . INT
    COMMA           reduce using rule 110 (empty -> .)
    FUNC            reduce using rule 110 (empty -> .)
    MAIN            reduce using rule 110 (empty -> .)
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    tipo                           shift and go to state 25
    multivd                        shift and go to state 171
    empty                          shift and go to state 24

state 154

    (106) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN . stmnt while3 END
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    END             reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    stmnt                          shift and go to state 172
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 155

    (100) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt . else_stmnt END if2
    (103) else_stmnt -> . empty
    (104) else_stmnt -> . ELSE else1 stmnt
    (110) empty -> .
    ELSE            shift and go to state 175
    END             reduce using rule 110 (empty -> .)

    else_stmnt                     shift and go to state 173
    empty                          shift and go to state 174

state 156

    (61) logic -> rel log2 OR log1 . logic
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    rel                            shift and go to state 76
    logic                          shift and go to state 176
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 157

    (62) logic -> rel log2 AND log1 . logic
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    rel                            shift and go to state 76
    logic                          shift and go to state 177
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 158

    (72) rel -> exp rel2 relop rel1 . rel
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    exp                            shift and go to state 77
    rel                            shift and go to state 178
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 159

    (76) exp -> term exp2 SUB exp1 . exp
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    term                           shift and go to state 78
    exp                            shift and go to state 179
    factor                         shift and go to state 79

state 160

    (77) exp -> term exp2 SUM exp1 . exp
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    term                           shift and go to state 78
    exp                            shift and go to state 180
    factor                         shift and go to state 79

state 161

    (81) term -> factor term2 DIV term1 . term
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    factor                         shift and go to state 79
    term                           shift and go to state 181

state 162

    (82) term -> factor term2 MULT term1 . term
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    factor                         shift and go to state 79
    term                           shift and go to state 182

state 163

    (91) factor -> ID fact1 LPAREN logic . multiexp RPAREN
    (98) multiexp -> . empty
    (99) multiexp -> . COMMA logic multiexp
    (110) empty -> .
    COMMA           shift and go to state 185
    RPAREN          reduce using rule 110 (empty -> .)

    multiexp                       shift and go to state 183
    empty                          shift and go to state 184

state 164

    (55) write_stmnt -> WRITE io1 LPAREN logic io2 multio . RPAREN io3 SEMICLN
    RPAREN          shift and go to state 186


state 165

    (54) read_stmnt -> READ io1 LPAREN logic multio io2 . RPAREN io3 SEMICLN
    RPAREN          shift and go to state 187


state 166

    (57) multio -> COMMA logic . io2 multio
    (59) io2 -> .
    COMMA           reduce using rule 59 (io2 -> .)
    RPAREN          reduce using rule 59 (io2 -> .)

    io2                            shift and go to state 188

state 167

    (52) multiarg -> COMMA arg multiarg .
    COMMA           reduce using rule 52 (multiarg -> COMMA arg multiarg .)
    RPAREN          reduce using rule 52 (multiarg -> COMMA arg multiarg .)


state 168

    (44) ass_stmnt -> ID ass1 arr ASS ass2 logic . ass3 SEMICLN
    (47) ass3 -> .
    SEMICLN         reduce using rule 47 (ass3 -> .)

    ass3                           shift and go to state 189

state 169

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY . varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (4) varsdecl -> . empty
    (5) varsdecl -> . VARS prog3 multivd multid
    (110) empty -> .
    VARS            shift and go to state 9
    WHILE           reduce using rule 110 (empty -> .)
    IF              reduce using rule 110 (empty -> .)
    WRITE           reduce using rule 110 (empty -> .)
    READ            reduce using rule 110 (empty -> .)
    RETURN          reduce using rule 110 (empty -> .)
    ID              reduce using rule 110 (empty -> .)
    RCURLY          reduce using rule 110 (empty -> .)

    varsdecl                       shift and go to state 190
    empty                          shift and go to state 8

state 170

    (29) param -> tipo param1 COLON ID . param2 multiparam
    (31) param2 -> .
    COMMA           reduce using rule 31 (param2 -> .)
    RPAREN          reduce using rule 31 (param2 -> .)

    param2                         shift and go to state 191

state 171

    (8) multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .
    COMMA           reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    FUNC            reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    MAIN            reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    WHILE           reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    IF              reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    WRITE           reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    READ            reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    RETURN          reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    ID              reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)
    RCURLY          reduce using rule 8 (multivd -> tipo prog4 COLON ID prog5 arr multid SEMICLN multivd .)


state 172

    (106) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt . while3 END
    (109) while3 -> .
    END             reduce using rule 109 (while3 -> .)

    while3                         shift and go to state 192

state 173

    (100) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt . END if2
    END             shift and go to state 193


state 174

    (103) else_stmnt -> empty .
    END             reduce using rule 103 (else_stmnt -> empty .)


state 175

    (104) else_stmnt -> ELSE . else1 stmnt
    (105) else1 -> .
    WHILE           reduce using rule 105 (else1 -> .)
    IF              reduce using rule 105 (else1 -> .)
    WRITE           reduce using rule 105 (else1 -> .)
    READ            reduce using rule 105 (else1 -> .)
    RETURN          reduce using rule 105 (else1 -> .)
    ID              reduce using rule 105 (else1 -> .)
    END             reduce using rule 105 (else1 -> .)

    else1                          shift and go to state 194

state 176

    (61) logic -> rel log2 OR log1 logic .
    RPAREN          reduce using rule 61 (logic -> rel log2 OR log1 logic .)
    COMMA           reduce using rule 61 (logic -> rel log2 OR log1 logic .)
    SEMICLN         reduce using rule 61 (logic -> rel log2 OR log1 logic .)


state 177

    (62) logic -> rel log2 AND log1 logic .
    RPAREN          reduce using rule 62 (logic -> rel log2 AND log1 logic .)
    COMMA           reduce using rule 62 (logic -> rel log2 AND log1 logic .)
    SEMICLN         reduce using rule 62 (logic -> rel log2 AND log1 logic .)


state 178

    (72) rel -> exp rel2 relop rel1 rel .
    OR              reduce using rule 72 (rel -> exp rel2 relop rel1 rel .)
    AND             reduce using rule 72 (rel -> exp rel2 relop rel1 rel .)
    RPAREN          reduce using rule 72 (rel -> exp rel2 relop rel1 rel .)
    COMMA           reduce using rule 72 (rel -> exp rel2 relop rel1 rel .)
    SEMICLN         reduce using rule 72 (rel -> exp rel2 relop rel1 rel .)


state 179

    (76) exp -> term exp2 SUB exp1 exp .
    EQUAL_TO        reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    DIFFERENT_TO    reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    LESS_OR_EQ_THAN reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    MORE_OR_EQ_THAN reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    LESS_THAN       reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    MORE_THAN       reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    OR              reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    AND             reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    RPAREN          reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    COMMA           reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    RSQUARE         reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)
    SEMICLN         reduce using rule 76 (exp -> term exp2 SUB exp1 exp .)


state 180

    (77) exp -> term exp2 SUM exp1 exp .
    EQUAL_TO        reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    DIFFERENT_TO    reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    LESS_OR_EQ_THAN reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    MORE_OR_EQ_THAN reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    LESS_THAN       reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    MORE_THAN       reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    OR              reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    AND             reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    RPAREN          reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    COMMA           reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    RSQUARE         reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)
    SEMICLN         reduce using rule 77 (exp -> term exp2 SUM exp1 exp .)


state 181

    (81) term -> factor term2 DIV term1 term .
    SUB             reduce using rule 81 (term -> factor term2 DIV term1 term .)
    SUM             reduce using rule 81 (term -> factor term2 DIV term1 term .)
    EQUAL_TO        reduce using rule 81 (term -> factor term2 DIV term1 term .)
    DIFFERENT_TO    reduce using rule 81 (term -> factor term2 DIV term1 term .)
    LESS_OR_EQ_THAN reduce using rule 81 (term -> factor term2 DIV term1 term .)
    MORE_OR_EQ_THAN reduce using rule 81 (term -> factor term2 DIV term1 term .)
    LESS_THAN       reduce using rule 81 (term -> factor term2 DIV term1 term .)
    MORE_THAN       reduce using rule 81 (term -> factor term2 DIV term1 term .)
    OR              reduce using rule 81 (term -> factor term2 DIV term1 term .)
    AND             reduce using rule 81 (term -> factor term2 DIV term1 term .)
    RPAREN          reduce using rule 81 (term -> factor term2 DIV term1 term .)
    COMMA           reduce using rule 81 (term -> factor term2 DIV term1 term .)
    RSQUARE         reduce using rule 81 (term -> factor term2 DIV term1 term .)
    SEMICLN         reduce using rule 81 (term -> factor term2 DIV term1 term .)


state 182

    (82) term -> factor term2 MULT term1 term .
    SUB             reduce using rule 82 (term -> factor term2 MULT term1 term .)
    SUM             reduce using rule 82 (term -> factor term2 MULT term1 term .)
    EQUAL_TO        reduce using rule 82 (term -> factor term2 MULT term1 term .)
    DIFFERENT_TO    reduce using rule 82 (term -> factor term2 MULT term1 term .)
    LESS_OR_EQ_THAN reduce using rule 82 (term -> factor term2 MULT term1 term .)
    MORE_OR_EQ_THAN reduce using rule 82 (term -> factor term2 MULT term1 term .)
    LESS_THAN       reduce using rule 82 (term -> factor term2 MULT term1 term .)
    MORE_THAN       reduce using rule 82 (term -> factor term2 MULT term1 term .)
    OR              reduce using rule 82 (term -> factor term2 MULT term1 term .)
    AND             reduce using rule 82 (term -> factor term2 MULT term1 term .)
    RPAREN          reduce using rule 82 (term -> factor term2 MULT term1 term .)
    COMMA           reduce using rule 82 (term -> factor term2 MULT term1 term .)
    RSQUARE         reduce using rule 82 (term -> factor term2 MULT term1 term .)
    SEMICLN         reduce using rule 82 (term -> factor term2 MULT term1 term .)


state 183

    (91) factor -> ID fact1 LPAREN logic multiexp . RPAREN
    RPAREN          shift and go to state 195


state 184

    (98) multiexp -> empty .
    RPAREN          reduce using rule 98 (multiexp -> empty .)


state 185

    (99) multiexp -> COMMA . logic multiexp
    (61) logic -> . rel log2 OR log1 logic
    (62) logic -> . rel log2 AND log1 logic
    (63) logic -> . rel log2
    (72) rel -> . exp rel2 relop rel1 rel
    (73) rel -> . exp rel2
    (76) exp -> . term exp2 SUB exp1 exp
    (77) exp -> . term exp2 SUM exp1 exp
    (78) exp -> . term exp2
    (81) term -> . factor term2 DIV term1 term
    (82) term -> . factor term2 MULT term1 term
    (83) term -> . factor term2
    (86) factor -> . FALSE ctes4
    (87) factor -> . TRUE ctes4
    (88) factor -> . CTE_STR ctes3
    (89) factor -> . CTE_FLT ctes2
    (90) factor -> . CTE_NUM ctes1
    (91) factor -> . ID fact1 LPAREN logic multiexp RPAREN
    (92) factor -> . ID fact1 arr
    FALSE           shift and go to state 80
    TRUE            shift and go to state 81
    CTE_STR         shift and go to state 82
    CTE_FLT         shift and go to state 83
    CTE_NUM         shift and go to state 84
    ID              shift and go to state 85

    logic                          shift and go to state 196
    rel                            shift and go to state 76
    exp                            shift and go to state 77
    term                           shift and go to state 78
    factor                         shift and go to state 79

state 186

    (55) write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN . io3 SEMICLN
    (60) io3 -> .
    SEMICLN         reduce using rule 60 (io3 -> .)

    io3                            shift and go to state 197

state 187

    (54) read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN . io3 SEMICLN
    (60) io3 -> .
    SEMICLN         reduce using rule 60 (io3 -> .)

    io3                            shift and go to state 198

state 188

    (57) multio -> COMMA logic io2 . multio
    (56) multio -> .
    (57) multio -> . COMMA logic io2 multio
    RPAREN          reduce using rule 56 (multio -> .)
    COMMA           shift and go to state 145

    multio                         shift and go to state 199

state 189

    (44) ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 . SEMICLN
    SEMICLN         shift and go to state 200


state 190

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl . func4 stmnt resetvarcont RCURLY funcdecl
    (24) func4 -> .
    WHILE           reduce using rule 24 (func4 -> .)
    IF              reduce using rule 24 (func4 -> .)
    WRITE           reduce using rule 24 (func4 -> .)
    READ            reduce using rule 24 (func4 -> .)
    RETURN          reduce using rule 24 (func4 -> .)
    ID              reduce using rule 24 (func4 -> .)
    RCURLY          reduce using rule 24 (func4 -> .)

    func4                          shift and go to state 201

state 191

    (29) param -> tipo param1 COLON ID param2 . multiparam
    (32) multiparam -> . empty
    (33) multiparam -> . COMMA param
    (110) empty -> .
    COMMA           shift and go to state 204
    RPAREN          reduce using rule 110 (empty -> .)

    multiparam                     shift and go to state 202
    empty                          shift and go to state 203

state 192

    (106) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 . END
    END             shift and go to state 205


state 193

    (100) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END . if2
    (102) if2 -> .
    WHILE           reduce using rule 102 (if2 -> .)
    IF              reduce using rule 102 (if2 -> .)
    WRITE           reduce using rule 102 (if2 -> .)
    READ            reduce using rule 102 (if2 -> .)
    RETURN          reduce using rule 102 (if2 -> .)
    ID              reduce using rule 102 (if2 -> .)
    $end            reduce using rule 102 (if2 -> .)
    ELSE            reduce using rule 102 (if2 -> .)
    END             reduce using rule 102 (if2 -> .)
    RCURLY          reduce using rule 102 (if2 -> .)

    if2                            shift and go to state 206

state 194

    (104) else_stmnt -> ELSE else1 . stmnt
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    END             reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    stmnt                          shift and go to state 207
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 195

    (91) factor -> ID fact1 LPAREN logic multiexp RPAREN .
    DIV             reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    MULT            reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    SUB             reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    SUM             reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    EQUAL_TO        reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    DIFFERENT_TO    reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    LESS_OR_EQ_THAN reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    MORE_OR_EQ_THAN reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    LESS_THAN       reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    MORE_THAN       reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    OR              reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    AND             reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    RPAREN          reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    COMMA           reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    RSQUARE         reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)
    SEMICLN         reduce using rule 91 (factor -> ID fact1 LPAREN logic multiexp RPAREN .)


state 196

    (99) multiexp -> COMMA logic . multiexp
    (98) multiexp -> . empty
    (99) multiexp -> . COMMA logic multiexp
    (110) empty -> .
    COMMA           shift and go to state 185
    RPAREN          reduce using rule 110 (empty -> .)

    multiexp                       shift and go to state 208
    empty                          shift and go to state 184

state 197

    (55) write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 . SEMICLN
    SEMICLN         shift and go to state 209


state 198

    (54) read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 . SEMICLN
    SEMICLN         shift and go to state 210


state 199

    (57) multio -> COMMA logic io2 multio .
    RPAREN          reduce using rule 57 (multio -> COMMA logic io2 multio .)


state 200

    (44) ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .
    WHILE           reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    IF              reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    WRITE           reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    READ            reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    RETURN          reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    ID              reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    $end            reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    ELSE            reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    END             reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)
    RCURLY          reduce using rule 44 (ass_stmnt -> ID ass1 arr ASS ass2 logic ass3 SEMICLN .)


state 201

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 . stmnt resetvarcont RCURLY funcdecl
    (35) stmnt -> . empty
    (36) stmnt -> . while_stmnt stmnt
    (37) stmnt -> . if_stmnt stmnt
    (38) stmnt -> . write_stmnt stmnt
    (39) stmnt -> . read_stmnt stmnt
    (40) stmnt -> . ret_stmnt stmnt
    (41) stmnt -> . func_stmnt stmnt
    (42) stmnt -> . ass_stmnt stmnt
    (110) empty -> .
    (106) while_stmnt -> . WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END
    (100) if_stmnt -> . IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2
    (55) write_stmnt -> . WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN
    (54) read_stmnt -> . READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN
    (53) ret_stmnt -> . RETURN LPAREN logic RPAREN SEMICLN
    (48) func_stmnt -> . ID LPAREN arg RPAREN SEMICLN
    (43) ass_stmnt -> . ID arr ASS func_stmnt SEMICLN
    (44) ass_stmnt -> . ID ass1 arr ASS ass2 logic ass3 SEMICLN
    RCURLY          reduce using rule 110 (empty -> .)
    WHILE           shift and go to state 45
    IF              shift and go to state 46
    WRITE           shift and go to state 47
    READ            shift and go to state 48
    RETURN          shift and go to state 49
    ID              shift and go to state 50

    stmnt                          shift and go to state 211
    empty                          shift and go to state 37
    while_stmnt                    shift and go to state 38
    if_stmnt                       shift and go to state 39
    write_stmnt                    shift and go to state 40
    read_stmnt                     shift and go to state 41
    ret_stmnt                      shift and go to state 42
    func_stmnt                     shift and go to state 43
    ass_stmnt                      shift and go to state 44

state 202

    (29) param -> tipo param1 COLON ID param2 multiparam .
    RPAREN          reduce using rule 29 (param -> tipo param1 COLON ID param2 multiparam .)


state 203

    (32) multiparam -> empty .
    RPAREN          reduce using rule 32 (multiparam -> empty .)


state 204

    (33) multiparam -> COMMA . param
    (28) param -> . empty
    (29) param -> . tipo param1 COLON ID param2 multiparam
    (110) empty -> .
    (13) tipo -> . BOOL
    (14) tipo -> . CHAR
    (15) tipo -> . FLOAT
    (16) tipo -> . INT
    RPAREN          reduce using rule 110 (empty -> .)
    BOOL            shift and go to state 19
    CHAR            shift and go to state 20
    FLOAT           shift and go to state 21
    INT             shift and go to state 22

    param                          shift and go to state 212
    empty                          shift and go to state 96
    tipo                           shift and go to state 97

state 205

    (106) while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .
    WHILE           reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    IF              reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    WRITE           reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    READ            reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    RETURN          reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    ID              reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    $end            reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    ELSE            reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    END             reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)
    RCURLY          reduce using rule 106 (while_stmnt -> WHILE while1 LPAREN logic while2 RPAREN stmnt while3 END .)


state 206

    (100) if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .
    WHILE           reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    IF              reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    WRITE           reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    READ            reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    RETURN          reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    ID              reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    $end            reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    ELSE            reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    END             reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)
    RCURLY          reduce using rule 100 (if_stmnt -> IF LPAREN logic if1 RPAREN stmnt else_stmnt END if2 .)


state 207

    (104) else_stmnt -> ELSE else1 stmnt .
    END             reduce using rule 104 (else_stmnt -> ELSE else1 stmnt .)


state 208

    (99) multiexp -> COMMA logic multiexp .
    RPAREN          reduce using rule 99 (multiexp -> COMMA logic multiexp .)


state 209

    (55) write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .
    WHILE           reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    IF              reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    WRITE           reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    READ            reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    RETURN          reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    ID              reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    $end            reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    ELSE            reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    END             reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)
    RCURLY          reduce using rule 55 (write_stmnt -> WRITE io1 LPAREN logic io2 multio RPAREN io3 SEMICLN .)


state 210

    (54) read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .
    WHILE           reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    IF              reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    WRITE           reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    READ            reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    RETURN          reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    ID              reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    $end            reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    ELSE            reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    END             reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)
    RCURLY          reduce using rule 54 (read_stmnt -> READ io1 LPAREN logic multio io2 RPAREN io3 SEMICLN .)


state 211

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt . resetvarcont RCURLY funcdecl
    (25) resetvarcont -> .
    RCURLY          reduce using rule 25 (resetvarcont -> .)

    resetvarcont                   shift and go to state 213

state 212

    (33) multiparam -> COMMA param .
    RPAREN          reduce using rule 33 (multiparam -> COMMA param .)


state 213

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont . RCURLY funcdecl
    RCURLY          shift and go to state 214


state 214

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY . funcdecl
    (19) funcdecl -> . empty
    (20) funcdecl -> . FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl
    (110) empty -> .
    FUNC            shift and go to state 12
    MAIN            reduce using rule 110 (empty -> .)

    funcdecl                       shift and go to state 215
    empty                          shift and go to state 11

state 215

    (20) funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl .
    MAIN            reduce using rule 20 (funcdecl -> FUNC tipofunc func1 ID func2 LPAREN param RPAREN func3 LCURLY varsdecl func4 stmnt resetvarcont RCURLY funcdecl .)


Conflicts:

shift/reduce conflict for LSQUARE in state 50 resolved as shift
shift/reduce conflict for COMMA in state 91 resolved as shift
shift/reduce conflict for COMMA in state 148 resolved as shift
reduce/reduce conflict in state 50 resolved using rule ass1 -> <empty>
rejected rule (empty -> <empty>) in state 50